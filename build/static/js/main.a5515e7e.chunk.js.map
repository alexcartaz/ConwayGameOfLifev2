{"version":3,"sources":["components/Cell.js","components/Board.js","components/Controls.js","App.js","actions/index.js","serviceWorker.js","reducers/index.js","index.js"],"names":["LifeCell","styled","div","_templateObject","Cell","props","react_default","a","createElement","BoardContainer","Board_templateObject","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","board","delay","map","cell","components_Cell","isAlive","Component","Controls","App","className","components_Board","components_Controls","connect","isRunning","error","iterateBoard","dispatch","console","log","type","payload","Boolean","window","location","hostname","match","initState","randomSeed","c","Math","floor","random","initBoard","reducer","arguments","length","undefined","objectSpread","store","createStore","applyMiddleware","thunk","logger","rootElement","document","getElementById","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yZAGA,IAAMA,EAAWC,IAAOC,IAAVC,KAiBCC,EANF,SAAAC,GACX,OACEC,EAAAC,EAAAC,cAACR,EAAD,4ICZJ,IAAMS,EAAiBR,IAAOC,IAAVQ,KA2BLC,cAnBb,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KACDc,MAAQ,CACXC,MAAOf,EAAMe,MACbC,MAAOhB,EAAMgB,OAJET,wEASjB,OACEN,EAAAC,EAAAC,cAACC,EAAD,KACGM,KAAKV,MAAMe,MAAME,IAAI,SAAAC,GAAI,OACxBjB,EAAAC,EAAAC,cAACgB,EAAD,CAAMC,QAASF,cAdLG,aCgCLC,EAdE,SAAAtB,GACf,OACEC,EAAAC,EAAAC,cAAA,qBCtBEoB,gOAQF,OACEtB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAACsB,EAAUf,KAAKV,OAChBC,EAAAC,EAAAC,cAACuB,EAAahB,KAAKV,eAXTqB,aAwBHM,cAPS,SAAAb,GAAK,MAAK,CAChCC,MAAOD,EAAMC,MACbC,MAAOF,EAAME,MACbY,UAAWd,EAAMc,UACjBC,MAAOf,EAAMe,QAKb,CAAEC,aC9BwB,SAAAf,GAAK,OAAI,SAAAgB,GACnCC,QAAQC,IAAI,iBACZF,EAAS,CAAEG,KANmB,qBAuB9BF,QAAQC,IAAI,mBACZF,EAAS,CAAEG,KAvBqB,qBAuBKC,QAASpB,ODQjCY,CAGbJ,GEvBkBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uGCIN,IAAMC,EAAY,CAChB1B,MAhBF,WAIE,IAHA,IAAIA,EAAQ,GACR2B,EAAa,EAERC,EAAI,EAAGA,EAAI,IAAMA,IACxBD,EAAaE,KAAKC,MAAsB,GAAhBD,KAAKE,UAE3B/B,EAAM4B,GADW,IAAfD,EAMN,OAAO3B,EAIAgC,GACPnB,WAAW,EACXZ,MAAO,EACPa,MAAO,MAsBMmB,EAnBC,WAA+B,IAA9BlC,EAA8BmC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBR,EACvB,QAD6CQ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC9BjB,MAEb,IFhC4B,mBEqC5B,IFpC8B,qBEqC5B,OAAO1B,OAAA4C,EAAA,EAAA5C,CAAA,GACFM,EADL,CAEEe,MAAO,OAGX,QACE,OAAOf,ICjCPuC,EAAQC,YACZN,EACAO,YAAgBC,IAAOC,MAGnBC,EAAcC,SAASC,eAAe,QAE5CC,IAASC,OACP7D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAUV,MAAOA,GACfpD,EAAAC,EAAAC,cAAC6D,EAAD,OAEFN,GF2GI,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a5515e7e.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst LifeCell = styled.div`\n  border: 1px solid pink;\n  width: 100%;\n  height: 40px;\n`;\n\n/*\n  should be a way to access passed 'isAlive' boolean value and use for\n  conditional color rendering of cell styled component background color\n*/\n\nconst Cell = props => {\n  return(\n    <LifeCell />\n  );\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport styled from 'styled-components';\n\nconst BoardContainer = styled.div`\n  display: flex;\n  width: 100%;\n  background-color: black;\n`;\n\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: props.board,\n      delay: props.delay\n    };\n  }\n\n  render() {\n    return (\n      <BoardContainer>\n        {this.props.board.map(cell => (\n          <Cell isAlive={cell} />\n        ))}\n      </BoardContainer>\n    );\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport styled from 'styled-components';\n\n/*\nconst Start = styled.div`\n  border: 1px solid pink;\n  width: 100%;\n  height: 40px;\n`;\n\nconst Stop = styled.div`\n  border: 1px solid pink;\n  width: 100%;\n  height: 40px;\n`;\n\nconst Iterate = styled.div`\n  border: 1px solid pink;\n  width: 100%;\n  height: 40px;\n`;\n\nconst Clear = styled.div`\n  border: 1px solid pink;\n  width: 100%;\n  height: 40px;\n`;\n*/\nconst Controls = props => {\n  return(\n    <div>\n    </div>\n    /*\n    <Start />\n    <Stop />\n    <Iterate />\n    <Clear />\n    */\n    /*<Speed />*/\n  );\n}\n\nexport default Controls;","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\nimport { iterateBoard } from './actions/';\n\n\nclass App extends Component {\n\n  \n  componentDidMount() {\n    //this.props.initializeBoard();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Board {...this.props} />\n        <Controls {...this.props} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  error: state.error\n});\n\nexport default connect(\n  mapStateToProps,\n  { iterateBoard }\n)(App);\n\n/*\n<SmurfForm {...props} />\n<Smurfs {...this.props} />\n */","export const START_BOARD_INIT = 'START_BOARD_INIT';\nexport const BOARD_INIT_SUCCESS = 'BOARD_INIT_SUCCESS';\n//export const BOARD_INIT_FAILURE = 'BOARD_INIT_FAILURE';\n\nexport const iterateBoard = board => dispatch => {\n  console.log('start iterate');\n  dispatch({ type: START_BOARD_INIT });\n  /*\n    init board code -- will use if reducer init state doesnt work\n\n    let board = []\n  let randomSeed = 0\n  //this config makes every 1 in 10 random squares in 100x100\n  for (let c = 0; c < 1000; c++){\n    randomSeed = Math.floor(Math.random() * 11);\n    if (randomSeed === 0) {\n      board[c] = 1\n    }else{\n      board[c] = 0\n    }\n  }\n  */\n  \n  console.log('iterate success');\n  dispatch({ type: BOARD_INIT_SUCCESS, payload: board });\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  START_BOARD_INIT,\n  BOARD_INIT_SUCCESS,\n} from '../actions';\n\n//import initBoard from ../lifeFunctions/lifeFunctions.js\n\nfunction initBoard(){\n  let board = []\n  let randomSeed = 0\n  //this config makes every 1 in 10 random squares in 100x100\n  for (let c = 0; c < 1000; c++){\n    randomSeed = Math.floor(Math.random() * 11);\n    if (randomSeed === 0) {\n      board[c] = true\n    }else{\n      board[c] = false\n    }\n  }\n  return board\n}\n\nconst initState = {\n  board: initBoard(),\n  isRunning: false,\n  delay: 2, //ms\n  error: null,\n}\n\nconst reducer = (state = initState, action) => {\n  switch (action.type){\n    //change view\n    case START_BOARD_INIT:\n      return {\n        ...state,\n        error: null\n      };\n    case BOARD_INIT_SUCCESS:\n      return {\n        ...state,\n        error: null\n      };\n\n    default: \n      return state;\n  }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers';\n\nconst store = createStore(\n  reducer, // this is the most basic reducer. A function that returns and object. Replace it.\n  applyMiddleware(thunk, logger)\n);\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}