{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls'; //import { iterateBoard } from './actions/';\n\nimport { initBoard, iterateGeneration } from './lifeFunctions/';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.onIterate = this.onIterate.bind(this);\n    this.state = {\n      //board: initBoard(),\n      isRunning: false,\n      board: initBoard(),\n      delay: 2,\n      //ms\n      generation: 0,\n      iterating: false,\n      error: null\n    };\n    this.currentBoard = this.state.board.concat([]);\n  } //only need to store values on state that are needed to trigger component re-renders\n  //removed board from state since onClick cell and button clicks (iterate, etc.) are\n  //all thats needed for re-render (not board itself)\n  //-can probably use generation for loop increment re-render if i hit issues\n  //once working, i should refactor to remove anything else from state not used for re-render\n\n\n  onCellClick(id) {\n    console.log('cell click');\n    this.currentBoard[id] = !this.currentBoard[id];\n  }\n\n  onIterate() {\n    console.log('*iterating*');\n    let newBoard = iterateGeneration(this.currentBoard);\n    console.log('does newBoard == oldBoard? ' + (newBoard === this.state.board));\n    this.currentBoard = newBoard;\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        generation: prevState.generation + 1,\n        board: newBoard.concat([])\n      });\n    });\n  } //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  //<Controls board={this.props.board} generation={generation} isRunning={isRunning} delay={delay} onIterateClick={this.onIterateClick} />\n\n\n  render() {\n    let _this$state = this.state,\n        isRunning = _this$state.isRunning,\n        generation = _this$state.generation,\n        delay = _this$state.delay;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: this.state.board,\n      isRunning: isRunning,\n      onClick: this.onCellClick,\n      generation: generation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(Controls, {\n      board: this.state.board,\n      generation: generation,\n      isRunning: isRunning,\n      delay: delay,\n      onIterateClick: this.onIterate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/App.js"],"names":["React","Component","Board","Controls","initBoard","iterateGeneration","App","constructor","props","onCellClick","bind","onIterate","state","isRunning","board","delay","generation","iterating","error","currentBoard","concat","id","console","log","newBoard","setState","prevState","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB,C,CACA;;AACA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,kBAA7C;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAC1BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKE,KAAL,GAAa;AACX;AACAC,MAAAA,SAAS,EAAE,KAFA;AAGXC,MAAAA,KAAK,EAAEV,SAAS,EAHL;AAIXW,MAAAA,KAAK,EAAE,CAJI;AAID;AACVC,MAAAA,UAAU,EAAE,CALD;AAMXC,MAAAA,SAAS,EAAE,KANA;AAOXC,MAAAA,KAAK,EAAE;AAPI,KAAb;AASA,SAAKC,YAAL,GAAoB,KAAKP,KAAL,CAAWE,KAAX,CAAiBM,MAAjB,CAAwB,EAAxB,CAApB;AACD,GAfyB,CAiB1B;AACA;AACA;AACA;AACA;;;AACAX,EAAAA,WAAW,CAACY,EAAD,EAAK;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,SAAKJ,YAAL,CAAkBE,EAAlB,IAAwB,CAAC,KAAKF,YAAL,CAAkBE,EAAlB,CAAzB;AACD;;AAEDV,EAAAA,SAAS,GAAE;AACTW,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,QAAIC,QAAQ,GAAGnB,iBAAiB,CAAC,KAAKc,YAAN,CAAhC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCC,QAAQ,KAAK,KAAKZ,KAAL,CAAWE,KAAzD,CAAZ;AACA,SAAKK,YAAL,GAAoBK,QAApB;AACA,SAAKC,QAAL,CAAcC,SAAS,IAAI;AACzB,+BACKA,SADL;AAEEV,QAAAA,UAAU,EAAEU,SAAS,CAACV,UAAV,GAAuB,CAFrC;AAGEF,QAAAA,KAAK,EAAEU,QAAQ,CAACJ,MAAT,CAAgB,EAAhB;AAHT;AAKD,KAND;AAOD,GAvCyB,CAyC1B;AACA;;;AAEAO,EAAAA,MAAM,GAAG;AAAA,sBAC8B,KAAKf,KADnC;AAAA,QACFC,SADE,eACFA,SADE;AAAA,QACSG,UADT,eACSA,UADT;AAAA,QACqBD,KADrB,eACqBA,KADrB;AAEP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWE,KAAzB;AAAgC,MAAA,SAAS,EAAED,SAA3C;AAAsD,MAAA,OAAO,EAAE,KAAKJ,WAApE;AAAiF,MAAA,UAAU,EAAEO,UAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWE,KAA5B;AAAmC,MAAA,UAAU,EAAEE,UAA/C;AAA2D,MAAA,SAAS,EAAEH,SAAtE;AAAiF,MAAA,KAAK,EAAEE,KAAxF;AAA+F,MAAA,cAAc,EAAE,KAAKJ,SAApH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AApDyB;;AAuD5B,eAAeL,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\n//import { iterateBoard } from './actions/';\nimport { initBoard, iterateGeneration } from './lifeFunctions/';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.onIterate = this.onIterate.bind(this);\n    this.state = {\n      //board: initBoard(),\n      isRunning: false,\n      board: initBoard(),\n      delay: 2, //ms\n      generation: 0,\n      iterating: false,\n      error: null\n    };\n    this.currentBoard = this.state.board.concat([]);\n  }\n\n  //only need to store values on state that are needed to trigger component re-renders\n  //removed board from state since onClick cell and button clicks (iterate, etc.) are\n  //all thats needed for re-render (not board itself)\n  //-can probably use generation for loop increment re-render if i hit issues\n  //once working, i should refactor to remove anything else from state not used for re-render\n  onCellClick(id) {\n    console.log('cell click')\n    this.currentBoard[id] = !this.currentBoard[id]\n  };\n\n  onIterate(){\n    console.log('*iterating*')\n    let newBoard = iterateGeneration(this.currentBoard)\n    console.log('does newBoard == oldBoard? ' + (newBoard === this.state.board))\n    this.currentBoard = newBoard\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        generation: prevState.generation + 1,\n        board: newBoard.concat([])\n      };\n    });\n  }\n\n  //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  //<Controls board={this.props.board} generation={generation} isRunning={isRunning} delay={delay} onIterateClick={this.onIterateClick} />\n      \n  render() {\n    let {isRunning, generation, delay} = this.state\n    return (\n      <div className=\"App\">\n        <Board board={this.state.board} isRunning={isRunning} onClick={this.onCellClick} generation={generation} />\n        <Controls board={this.state.board} generation={generation} isRunning={isRunning} delay={delay} onIterateClick={this.onIterate} />\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}