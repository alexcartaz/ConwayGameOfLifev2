{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\nimport { iterateBoard, toggleCellUpdate } from './actions/';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.onIterateClick = this.onIterateClick.bind(this);\n    this.state = {\n      board: props.board\n    };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps, prevState) {}\n\n  onCellClick(id) {\n    let board = this.props.board;\n    board[id] = !board[id];\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        board: board //board.concat([])\n\n      });\n    });\n  }\n\n  onIterateClick(board, generation) {\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        board: board.concat([]),\n        generation: generation\n      });\n    });\n  } //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n\n\n  render() {\n    let _this$props = this.props,\n        board = _this$props.board,\n        isRunning = _this$props.isRunning,\n        generation = _this$props.generation,\n        delay = _this$props.delay;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: board,\n      isRunning: isRunning,\n      onClick: this.onCellClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(Controls, {\n      board: board,\n      generation: generation,\n      isRunning: isRunning,\n      delay: delay,\n      onIterateClick: this.onIterateClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  iterateBoard,\n  toggleCellUpdate\n})(App);","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/App.js"],"names":["React","Component","Board","Controls","connect","iterateBoard","toggleCellUpdate","App","constructor","props","onCellClick","bind","onIterateClick","state","board","componentDidMount","componentDidUpdate","prevProps","prevState","id","setState","generation","concat","render","isRunning","delay","mapStateToProps","iterating","error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,YAA/C;;AAGA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAC1BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEL,KAAK,CAACK;AADF,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG,CACnB;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB,CACvC;;AAEDR,EAAAA,WAAW,CAACS,EAAD,EAAK;AACd,QAAIL,KAAK,GAAG,KAAKL,KAAL,CAAWK,KAAvB;AACAA,IAAAA,KAAK,CAACK,EAAD,CAAL,GAAY,CAACL,KAAK,CAACK,EAAD,CAAlB;AACA,SAAKC,QAAL,CAAcF,SAAS,IAAI;AACzB,+BACKA,SADL;AAEEJ,QAAAA,KAAK,EAAEA,KAFT,CAEe;;AAFf;AAID,KALD;AAMD;;AAEDF,EAAAA,cAAc,CAACE,KAAD,EAAQO,UAAR,EAAmB;AAC/B,SAAKD,QAAL,CAAcF,SAAS,IAAI;AACzB,+BACKA,SADL;AAEEJ,QAAAA,KAAK,EAAEA,KAAK,CAACQ,MAAN,CAAa,EAAb,CAFT;AAGED,QAAAA,UAAU,EAAEA;AAHd;AAKD,KAND;AAOD,GAnCyB,CAqC1B;;;AACAE,EAAAA,MAAM,GAAG;AAAA,sBACqC,KAAKd,KAD1C;AAAA,QACFK,KADE,eACFA,KADE;AAAA,QACKU,SADL,eACKA,SADL;AAAA,QACgBH,UADhB,eACgBA,UADhB;AAAA,QAC4BI,KAD5B,eAC4BA,KAD5B;AAEP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEX,KAAd;AAAqB,MAAA,SAAS,EAAEU,SAAhC;AAA2C,MAAA,OAAO,EAAE,KAAKd,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEI,KAAjB;AAAwB,MAAA,UAAU,EAAEO,UAApC;AAAgD,MAAA,SAAS,EAAEG,SAA3D;AAAsE,MAAA,KAAK,EAAEC,KAA7E;AAAoF,MAAA,cAAc,EAAE,KAAKb,cAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AA9CyB;;AAiD5B,MAAMc,eAAe,GAAGb,KAAK,KAAK;AAChCC,EAAAA,KAAK,EAAED,KAAK,CAACC,KADmB;AAEhCW,EAAAA,KAAK,EAAEZ,KAAK,CAACY,KAFmB;AAGhCD,EAAAA,SAAS,EAAEX,KAAK,CAACW,SAHe;AAIhCH,EAAAA,UAAU,EAAE,CAJoB;AAKhCM,EAAAA,SAAS,EAAE,KALqB;AAMhCC,EAAAA,KAAK,EAAEf,KAAK,CAACe;AANmB,CAAL,CAA7B;;AASA,eAAexB,OAAO,CACpBsB,eADoB,EAEpB;AAAErB,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAFoB,CAAP,CAGbC,GAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\nimport { iterateBoard, toggleCellUpdate } from './actions/';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.onIterateClick = this.onIterateClick.bind(this);\n    this.state = {\n      board: props.board\n    };\n  } \n\n  componentDidMount() {\n  }\n\n  componentDidUpdate(prevProps, prevState){\n  }\n\n  onCellClick(id) {\n    let board = this.props.board\n    board[id] = !board[id]\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        board: board //board.concat([])\n      };\n    });\n  };\n\n  onIterateClick(board, generation){\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        board: board.concat([]),\n        generation: generation\n      };\n    });\n  }\n\n  //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  render() {\n    let {board, isRunning, generation, delay} = this.props\n    return (\n      <div className=\"App\">\n        <Board board={board} isRunning={isRunning} onClick={this.onCellClick} />\n        <Controls board={board} generation={generation} isRunning={isRunning} delay={delay} onIterateClick={this.onIterateClick} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(\n  mapStateToProps,\n  { iterateBoard, toggleCellUpdate }\n)(App);"]},"metadata":{},"sourceType":"module"}