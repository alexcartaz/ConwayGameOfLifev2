{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls'; //import { iterateBoard } from './actions/';\n\nimport { initBoard, iterateGeneration, clearBoard } from './lifeFunctions/';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.onIterate = this.onIterate.bind(this);\n    this.boardClear = this.boardClear.bind(this);\n    this.state = {\n      //board: initBoard(),\n      isRunning: false,\n      board: initBoard(),\n      delay: 2,\n      //ms\n      generation: 0,\n      iterating: false,\n      toggleUpdateState: false,\n      error: null\n    };\n    this.currentBoard = this.state.board.concat([]);\n  } //only need to store values on state that are needed to trigger component re-renders\n  //removed board from state since onClick cell and button clicks (iterate, etc.) are\n  //all thats needed for re-render (not board itself)\n  //-can probably use generation for loop increment re-render if i hit issues\n  //once working, i should refactor to remove anything else from state not used for re-render\n\n\n  onCellClick(id) {\n    console.log('cell click');\n    this.currentBoard[id] = !this.currentBoard[id];\n  }\n\n  boardClear() {\n    console.log('*clear*');\n    console.log('tUS: ' + this.state.toggleUpdateState);\n    let clearedBoard = clearBoard();\n    this.currentBoard = clearedBoard;\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        generation: 0,\n        board: clearedBoard.concat([]),\n        toggleUpdateState: !prevState.toggleUpdateState\n      });\n    });\n  }\n\n  onIterate() {\n    console.log('*iterating*');\n    let newBoard = iterateGeneration(this.currentBoard);\n    this.currentBoard = newBoard;\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        generation: prevState.generation + 1,\n        board: newBoard.concat([]),\n        toggleUpdateState: !prevState.toggleUpdateState\n      });\n    });\n  } //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  //<Controls board={this.props.board} generation={generation} isRunning={isRunning} delay={delay} onIterateClick={this.onIterateClick} />\n\n\n  render() {\n    let _this$state = this.state,\n        board = _this$state.board,\n        isRunning = _this$state.isRunning,\n        generation = _this$state.generation,\n        delay = _this$state.delay,\n        toggleUpdateState = _this$state.toggleUpdateState;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: board,\n      isRunning: isRunning,\n      onClick: this.onCellClick\n      /*generation={generation}*/\n      ,\n      toggleUpdateState: toggleUpdateState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Controls, {\n      board: board,\n      generation: generation,\n      isRunning: isRunning,\n      delay: delay,\n      onIterateClick: this.onIterate,\n      onClearClick: this.boardClear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/App.js"],"names":["React","Component","Board","Controls","initBoard","iterateGeneration","clearBoard","App","constructor","props","onCellClick","bind","onIterate","boardClear","state","isRunning","board","delay","generation","iterating","toggleUpdateState","error","currentBoard","concat","id","console","log","clearedBoard","setState","prevState","newBoard","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\n//import { iterateBoard } from './actions/';\nimport { initBoard, iterateGeneration , clearBoard } from './lifeFunctions/';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.onIterate = this.onIterate.bind(this);\n    this.boardClear = this.boardClear.bind(this);\n    this.state = {\n      //board: initBoard(),\n      isRunning: false,\n      board: initBoard(),\n      delay: 2, //ms\n      generation: 0,\n      iterating: false,\n      toggleUpdateState: false,\n      error: null\n    };\n    this.currentBoard = this.state.board.concat([]);\n  }\n\n  //only need to store values on state that are needed to trigger component re-renders\n  //removed board from state since onClick cell and button clicks (iterate, etc.) are\n  //all thats needed for re-render (not board itself)\n  //-can probably use generation for loop increment re-render if i hit issues\n  //once working, i should refactor to remove anything else from state not used for re-render\n  onCellClick(id) {\n    console.log('cell click')\n    this.currentBoard[id] = !this.currentBoard[id]\n  };\n\n  boardClear() {\n    console.log('*clear*')\n    console.log('tUS: ' + this.state.toggleUpdateState)\n    let clearedBoard = clearBoard()\n    this.currentBoard = clearedBoard\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        generation: 0,\n        board: clearedBoard.concat([]),\n        toggleUpdateState: !prevState.toggleUpdateState\n      };\n    });\n  }\n\n  onIterate(){\n    console.log('*iterating*')\n    let newBoard = iterateGeneration(this.currentBoard)\n    this.currentBoard = newBoard\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        generation: prevState.generation + 1,\n        board: newBoard.concat([]),\n        toggleUpdateState: !prevState.toggleUpdateState\n      };\n    });\n  }\n\n  //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  //<Controls board={this.props.board} generation={generation} isRunning={isRunning} delay={delay} onIterateClick={this.onIterateClick} />\n      \n  render() {\n    let {board, isRunning, generation, delay, toggleUpdateState} = this.state\n    return (\n      <div className=\"App\">\n        <Board board={board} isRunning={isRunning} onClick={this.onCellClick} /*generation={generation}*/ toggleUpdateState={toggleUpdateState} />\n        <Controls board={board} generation={generation} isRunning={isRunning} delay={delay} onIterateClick={this.onIterate} onClearClick={this.boardClear} />\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}