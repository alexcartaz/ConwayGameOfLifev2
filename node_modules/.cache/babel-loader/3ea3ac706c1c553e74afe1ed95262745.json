{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux'; //import { iterateBoard } from './actions/';\n\n/*\n***************  Life game code  *************\n */\n\nfunction generateIndex(row, column) {\n  return row * 50 + column;\n}\n\nfunction calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column) {\n  let indices = [];\n  indices.push(generateIndex(row_above, left_column));\n  indices.push(generateIndex(row_above, currentColumn));\n  indices.push(generateIndex(row_above, right_column));\n  indices.push(generateIndex(currentRow, right_column));\n  indices.push(generateIndex(row_below, right_column));\n  indices.push(generateIndex(row_below, currentColumn));\n  indices.push(generateIndex(row_below, left_column));\n  indices.push(generateIndex(currentRow, left_column));\n  return indices;\n}\n\nfunction determineNumberOfAliveNeighbors(board, index) {\n  //default 2500 (50x50)\n  //this approach should work for any board of equal height/width\n  let len = board.length;\n  let numRows = Math.sqrt(len);\n  let currentRow = Math.floor(index / numRows); //btw 1-50\n\n  let currentColumn = index % numRows;\n  /*\n  console.log(\"row: \" + currentRow)\n  console.log(\"column: \" + currentColumn)\n  console.log(\"index: \" + generateIndex(currentRow,currentColumn))\n  */\n\n  let row_above = 0;\n  let row_below = 0;\n  let left_column = 0;\n  let right_column = 0;\n\n  if (currentRow === 0) {\n    row_above = 49;\n  } else {\n    row_above = currentRow + 1;\n  }\n\n  if (currentRow === 49) {\n    row_below = 0;\n  } else {\n    row_below = currentRow - 1;\n  }\n\n  if (currentColumn === 49) {\n    right_column = 0;\n  } else {\n    right_column = currentColumn + 1;\n  }\n\n  if (currentColumn === 0) {\n    left_column = 49;\n  } else {\n    left_column = currentColumn - 1;\n  }\n\n  let indicesOfNeighbors = calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column);\n  let numNeighbors = 0;\n\n  for (let i = 0; i < 9; i++) {\n    if (board[indicesOfNeighbors[i]]) {\n      numNeighbors++;\n    }\n  }\n\n  return numNeighbors;\n}\n/*\n Rules:\n If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.\n If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.\n*/\n\n\nfunction iterateGeneration(board) {\n  console.log(\"!\");\n  let newBoard = [];\n\n  for (let c = 0; c < 2500; c++) {\n    let numNeighbors = determineNumberOfAliveNeighbors(board, 1329);\n\n    if (board[c] && (numNeighbors === 2 || numNeighbors === 3)) {\n      newBoard[c] = false;\n    } else if (!board[c] && numNeighbors === 3) {\n      newBoard[c] = true;\n    } else {\n      newBoard[c] = false;\n    }\n  }\n\n  return newBoard;\n}\n/*\n***********************************************\n */\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.onIterateClick = this.onIterateClick.bind(this);\n    this.state = {\n      board: props.board\n    };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps, prevState) {}\n\n  onCellClick(id) {\n    let board = this.props.board;\n    board[id] = !board[id];\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        board: board //board.concat([])\n\n      });\n    });\n  }\n\n  onIterateClick() {\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        board: iterateGeneration(this.props.board, this.props.generation).concat([]),\n        generation: this.props.generation + 1\n      });\n    });\n  } //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n\n\n  render() {\n    let _this$props = this.props,\n        board = _this$props.board,\n        isRunning = _this$props.isRunning,\n        generation = _this$props.generation,\n        delay = _this$props.delay;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: board,\n      isRunning: isRunning,\n      onClick: this.onCellClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(Controls, {\n      board: board,\n      generation: generation,\n      isRunning: isRunning,\n      delay: delay,\n      onIterateClick: this.onIterateClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  iterateBoard,\n  toggleCellUpdate\n})(App);","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/App.js"],"names":["React","Component","Board","Controls","connect","generateIndex","row","column","calcIndiciesOfNeighbors","currentRow","currentColumn","row_above","row_below","left_column","right_column","indices","push","determineNumberOfAliveNeighbors","board","index","len","length","numRows","Math","sqrt","floor","indicesOfNeighbors","numNeighbors","i","iterateGeneration","console","log","newBoard","c","App","constructor","props","onCellClick","bind","onIterateClick","state","componentDidMount","componentDidUpdate","prevProps","prevState","id","setState","generation","concat","render","isRunning","delay","mapStateToProps","iterating","error","iterateBoard","toggleCellUpdate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\n//import { iterateBoard } from './actions/';\n\n\n/*\n***************  Life game code  *************\n */\nfunction generateIndex(row, column){\n  return row*50+column\n}\n\nfunction calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column){\n  let indices = []\n  indices.push(generateIndex(row_above,left_column))\n  indices.push(generateIndex(row_above,currentColumn))\n  indices.push(generateIndex(row_above,right_column))\n  indices.push(generateIndex(currentRow,right_column))\n  indices.push(generateIndex(row_below,right_column))\n  indices.push(generateIndex(row_below,currentColumn))\n  indices.push(generateIndex(row_below,left_column))\n  indices.push(generateIndex(currentRow,left_column))\n  return indices\n}\n\nfunction determineNumberOfAliveNeighbors(board, index){\n  //default 2500 (50x50)\n  //this approach should work for any board of equal height/width\n  let len = board.length\n  let numRows = Math.sqrt(len)\n  let currentRow = Math.floor(index / numRows) //btw 1-50\n  let currentColumn = (index % numRows)\n  /*\n  console.log(\"row: \" + currentRow)\n  console.log(\"column: \" + currentColumn)\n  console.log(\"index: \" + generateIndex(currentRow,currentColumn))\n  */\n  let row_above = 0\n  let row_below = 0\n  let left_column = 0\n  let right_column = 0\n\n  if (currentRow === 0) {\n    row_above = 49\n  } else {\n    row_above = currentRow + 1\n  }\n\n  if (currentRow === 49) {\n    row_below = 0\n  } else {\n    row_below = currentRow - 1\n  }\n\n  if (currentColumn === 49) {\n    right_column = 0\n  } else {\n    right_column = currentColumn + 1\n  }\n\n  if (currentColumn === 0) {\n    left_column = 49\n  } else {\n    left_column = currentColumn - 1\n  }\n\n\n  let indicesOfNeighbors = calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column)\n  let numNeighbors = 0\n  for (let i = 0; i < 9; i++){\n    if (board[indicesOfNeighbors[i]]){\n      numNeighbors++;\n    }\n  }\n\n  return numNeighbors\n}\n\n /*\n  Rules:\n  If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.\n  If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.\n*/\n\nfunction iterateGeneration(board){\n  console.log(\"!\")\n  let newBoard = []\n  for (let c = 0; c < 2500; c++){\n    let numNeighbors = determineNumberOfAliveNeighbors(board, 1329)\n    if (board[c] && (numNeighbors===2 || numNeighbors===3)){\n      newBoard[c] = false\n    }else if(!board[c] && numNeighbors===3){\n      newBoard[c] = true\n    }else{\n      newBoard[c] = false\n    }\n  }\n  return newBoard\n}\n/*\n***********************************************\n */\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.onIterateClick = this.onIterateClick.bind(this);\n    this.state = {\n      board: props.board\n    };\n  } \n\n  componentDidMount() {\n  }\n\n  componentDidUpdate(prevProps, prevState){\n  }\n\n  onCellClick(id) {\n    let board = this.props.board\n    board[id] = !board[id]\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        board: board //board.concat([])\n      };\n    });\n  };\n\n  onIterateClick(){\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        board: iterateGeneration(this.props.board, (this.props.generation)).concat([]),\n        generation: this.props.generation+1\n      };\n    });\n  }\n\n  //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  render() {\n    let {board, isRunning, generation, delay} = this.props\n    return (\n      <div className=\"App\">\n        <Board board={board} isRunning={isRunning} onClick={this.onCellClick} />\n        <Controls board={board} generation={generation} isRunning={isRunning} delay={delay} onIterateClick={this.onIterateClick} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(\n  mapStateToProps,\n  { iterateBoard, toggleCellUpdate }\n)(App);"]},"metadata":{},"sourceType":"module"}