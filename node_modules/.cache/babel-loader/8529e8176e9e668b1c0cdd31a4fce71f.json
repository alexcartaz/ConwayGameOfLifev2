{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\nimport { iterateBoard, toggleCellUpdate } from './actions/';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this); //this.state = {\n    //};\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps, prevState) {}\n\n  onCellClick(id) {\n    let board = this.props.board;\n    board[id] = !board[id];\n    this.props.board = board; //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  }\n\n  render() {\n    if (this.props.iterating) {\n      console.log('-------------- LOADING --------------');\n      return React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Board, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      })), React.createElement(Controls, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      })));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  iterateBoard,\n  toggleCellUpdate\n})(App);","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/App.js"],"names":["React","Component","Board","Controls","connect","iterateBoard","toggleCellUpdate","App","constructor","props","onCellClick","bind","componentDidMount","componentDidUpdate","prevProps","prevState","id","board","render","iterating","console","log","mapStateToProps","state","delay","isRunning","generation","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,YAA/C;;AAGA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAC1BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB,CAFiB,CAGjB;AACA;AACD;;AAEDC,EAAAA,iBAAiB,GAAG,CACnB;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB,CACvC;;AAEDL,EAAAA,WAAW,CAACM,EAAD,EAAK;AACd,QAAIC,KAAK,GAAG,KAAKR,KAAL,CAAWQ,KAAvB;AACAA,IAAAA,KAAK,CAACD,EAAD,CAAL,GAAY,CAACC,KAAK,CAACD,EAAD,CAAlB;AACA,SAAKP,KAAL,CAAWQ,KAAX,GAAmBA,KAAnB,CAHc,CAId;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAG,KAAKT,KAAL,CAAWU,SAAd,EAAwB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAHD,MAGK;AACH,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,oBAAW,KAAKZ,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAEE,oBAAC,QAAD,oBAAc,KAAKA,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,CADF;AAMD;AACF;;AAjCyB;;AAoC5B,MAAMa,eAAe,GAAGC,KAAK,KAAK;AAChCN,EAAAA,KAAK,EAAEM,KAAK,CAACN,KADmB;AAEhCO,EAAAA,KAAK,EAAED,KAAK,CAACC,KAFmB;AAGhCC,EAAAA,SAAS,EAAEF,KAAK,CAACE,SAHe;AAIhCC,EAAAA,UAAU,EAAE,CAJoB;AAKhCP,EAAAA,SAAS,EAAE,KALqB;AAMhCQ,EAAAA,KAAK,EAAEJ,KAAK,CAACI;AANmB,CAAL,CAA7B;;AASA,eAAevB,OAAO,CACpBkB,eADoB,EAEpB;AAAEjB,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAFoB,CAAP,CAGbC,GAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\nimport { iterateBoard, toggleCellUpdate } from './actions/';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    //this.state = {\n    //};\n  } \n\n  componentDidMount() {\n  }\n\n  componentDidUpdate(prevProps, prevState){\n  }\n\n  onCellClick(id) {\n    let board = this.props.board\n    board[id] = !board[id]\n    this.props.board = board\n    //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  };\n\n  render() {\n    if(this.props.iterating){\n      console.log('-------------- LOADING --------------');\n      return <h4>Loading...</h4>\n    }else{\n      return (\n        <div className=\"App\">\n          <Board {...this.props} />\n          <Controls {...this.props} />\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(\n  mapStateToProps,\n  { iterateBoard, toggleCellUpdate }\n)(App);"]},"metadata":{},"sourceType":"module"}