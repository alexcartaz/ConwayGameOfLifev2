{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ITERATE_BOARD, TOGGLE_CELL_UPDATE, START_ITERATE_BOARD } from '../actions'; //import initBoard from ../lifeFunctions/lifeFunctions.js\n\nfunction initBoard() {\n  let board = [];\n  let randomSeed = 0; //this config makes every 1 in 10 random squares in 100x100\n\n  for (let c = 0; c < 2500; c++) {\n    randomSeed = Math.floor(Math.random() * 11);\n\n    if (randomSeed === 0) {\n      board[c] = true;\n    } else {\n      board[c] = false;\n    }\n  }\n\n  return board;\n}\n\nconst initState = {\n  board: initBoard(),\n  isRunning: false,\n  delay: 2,\n  //ms\n  generation: 0,\n  iterating: false,\n  error: null\n};\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case START_ITERATE_BOARD:\n      return _objectSpread({}, state, {\n        iterating: true\n      });\n\n    case ITERATE_BOARD:\n      return _objectSpread({}, state, {\n        board: action.payload.board.concat([]),\n        generation: action.payload.generation,\n        iterating: false,\n        error: null\n      });\n\n    case TOGGLE_CELL_UPDATE:\n      return _objectSpread({}, state, {\n        board: action.payload,\n        error: null\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/reducers/index.js"],"names":["ITERATE_BOARD","TOGGLE_CELL_UPDATE","START_ITERATE_BOARD","initBoard","board","randomSeed","c","Math","floor","random","initState","isRunning","delay","generation","iterating","error","reducer","state","action","type","payload","concat"],"mappings":";AAAA,SACEA,aADF,EAEEC,kBAFF,EAGEC,mBAHF,QAIO,YAJP,C,CAMA;;AAEA,SAASC,SAAT,GAAoB;AAClB,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,UAAU,GAAG,CAAjB,CAFkB,CAGlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAA8B;AAC5BD,IAAAA,UAAU,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAb;;AACA,QAAIJ,UAAU,KAAK,CAAnB,EAAsB;AACpBD,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,IAAX;AACD,KAFD,MAEK;AACHF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,KAAX;AACD;AACF;;AACD,SAAOF,KAAP;AACD;;AAED,MAAMM,SAAS,GAAG;AAChBN,EAAAA,KAAK,EAAED,SAAS,EADA;AAEhBQ,EAAAA,SAAS,EAAE,KAFK;AAGhBC,EAAAA,KAAK,EAAE,CAHS;AAGN;AACVC,EAAAA,UAAU,EAAE,CAJI;AAKhBC,EAAAA,SAAS,EAAE,KALK;AAMhBC,EAAAA,KAAK,EAAE;AANS,CAAlB;;AASA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGP,SAAT,EAAoBQ,MAApB,KAA+B;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKjB,mBAAL;AACE,+BACKe,KADL;AAEEH,QAAAA,SAAS,EAAE;AAFb;;AAIF,SAAKd,aAAL;AACE,+BACKiB,KADL;AAEEb,QAAAA,KAAK,EAAEc,MAAM,CAACE,OAAP,CAAehB,KAAf,CAAqBiB,MAArB,CAA4B,EAA5B,CAFT;AAGER,QAAAA,UAAU,EAAEK,MAAM,CAACE,OAAP,CAAeP,UAH7B;AAIEC,QAAAA,SAAS,EAAE,KAJb;AAKEC,QAAAA,KAAK,EAAE;AALT;;AAOF,SAAKd,kBAAL;AACE,+BACKgB,KADL;AAEEb,QAAAA,KAAK,EAAEc,MAAM,CAACE,OAFhB;AAGEL,QAAAA,KAAK,EAAE;AAHT;;AAMF;AACE,aAAOE,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,eAAeD,OAAf","sourcesContent":["import {\n  ITERATE_BOARD,\n  TOGGLE_CELL_UPDATE,\n  START_ITERATE_BOARD,\n} from '../actions';\n\n//import initBoard from ../lifeFunctions/lifeFunctions.js\n\nfunction initBoard(){\n  let board = []\n  let randomSeed = 0\n  //this config makes every 1 in 10 random squares in 100x100\n  for (let c = 0; c < 2500; c++){\n    randomSeed = Math.floor(Math.random() * 11);\n    if (randomSeed === 0) {\n      board[c] = true\n    }else{\n      board[c] = false\n    }\n  }\n  return board\n}\n\nconst initState = {\n  board: initBoard(),\n  isRunning: false,\n  delay: 2, //ms\n  generation: 0,\n  iterating: false,\n  error: null,\n}\n\nconst reducer = (state = initState, action) => {\n  switch (action.type){\n    case START_ITERATE_BOARD:\n      return {\n        ...state,\n        iterating: true\n      };\n    case ITERATE_BOARD:\n      return {\n        ...state,\n        board: action.payload.board.concat([]),\n        generation: action.payload.generation,\n        iterating: false,\n        error: null\n      };\n    case TOGGLE_CELL_UPDATE:\n      return {\n        ...state,\n        board: action.payload,\n        error: null\n      };\n\n    default: \n      return state;\n  }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}