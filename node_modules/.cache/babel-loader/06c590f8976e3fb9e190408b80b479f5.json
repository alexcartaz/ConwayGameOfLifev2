{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/components/Controls.js\";\nimport React, { Component } from 'react';\n/*\n  Rules:\n  If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.\n  If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.\n*/\n\nfunction generateIndex(row, column) {\n  return row * 50 + column;\n}\n\nfunction calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column) {\n  let indices = [];\n  indices.push(generateIndex(row_above, left_column));\n  indices.push(generateIndex(row_above, currentColumn));\n  indices.push(generateIndex(row_above, right_column));\n  indices.push(generateIndex(currentRow, right_column));\n  indices.push(generateIndex(row_below, right_column));\n  indices.push(generateIndex(row_below, currentColumn));\n  indices.push(generateIndex(row_below, left_column));\n  indices.push(generateIndex(currentRow, left_column));\n  return indices;\n}\n\nfunction determineNumberOfAliveNeighbors(board, index) {\n  //default 2500 (50x50)\n  //this approach should work for any board of equal height/width\n  let len = board.length;\n  let numRows = Math.sqrt(len);\n  let currentRow = Math.floor(index / numRows); //btw 1-50\n\n  let currentColumn = index % numRows;\n  /*\n  console.log(\"row: \" + currentRow)\n  console.log(\"column: \" + currentColumn)\n  console.log(\"index: \" + generateIndex(currentRow,currentColumn))\n  */\n\n  let row_above = 0;\n  let row_below = 0;\n  let left_column = 0;\n  let right_column = 0;\n\n  if (currentRow === 0) {\n    row_above = 49;\n  } else {\n    row_above = currentRow + 1;\n  }\n\n  if (currentRow === 49) {\n    row_below = 0;\n  } else {\n    row_below = currentRow - 1;\n  }\n\n  if (currentColumn === 49) {\n    right_column = 0;\n  } else {\n    right_column = currentColumn + 1;\n  }\n\n  if (currentColumn === 0) {\n    left_column = 49;\n  } else {\n    left_column = currentColumn - 1;\n  }\n\n  let indicesOfNeighbors = calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column);\n  let numNeighbors = 0;\n\n  for (let i = 0; i < 9; i++) {\n    if (board[indicesOfNeighbors[i]]) {\n      numNeighbors++;\n    }\n  }\n\n  return numNeighbors;\n}\n\nfunction iterateGeneration(board) {\n  console.log(\"!\");\n  let newBoard = []; //for (let c = 0; c < 2500; c++){\n\n  let numNeighbors = determineNumberOfAliveNeighbors(board, 1329); //}\n\n  return newBoard;\n}\n\nclass Controls extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = event => {\n      if (this.props.isRunning === false) {\n        this.props.iterateBoard(iterateGeneration(this.state.board), this.state.generation + 1);\n      }\n    };\n\n    this.state = {\n      board: props.board,\n      delay: props.delay,\n      isRunning: props.isRunning,\n      generation: props.generation\n    };\n  }\n\n  render() {\n    return (//<Iterate />\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: event => this.handleClick(event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Iterate\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Generation: \", this.state.generation))\n      /*\n      <Start />\n      <Stop />\n      <Clear />\n      */\n\n      /*<Speed />*/\n\n    );\n  }\n\n}\n\nexport default Controls;","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/components/Controls.js"],"names":["React","Component","generateIndex","row","column","calcIndiciesOfNeighbors","currentRow","currentColumn","row_above","row_below","left_column","right_column","indices","push","determineNumberOfAliveNeighbors","board","index","len","length","numRows","Math","sqrt","floor","indicesOfNeighbors","numNeighbors","i","iterateGeneration","console","log","newBoard","Controls","constructor","props","handleClick","event","isRunning","iterateBoard","state","generation","delay","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAGE;;;;;;AAMF,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,MAA5B,EAAmC;AACjC,SAAOD,GAAG,GAAC,EAAJ,GAAOC,MAAd;AACD;;AAED,SAASC,uBAAT,CAAiCC,UAAjC,EAA6CC,aAA7C,EAA4DC,SAA5D,EAAuEC,SAAvE,EAAkFC,WAAlF,EAA+FC,YAA/F,EAA4G;AAC1G,MAAIC,OAAO,GAAG,EAAd;AACAA,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACM,SAAD,EAAWE,WAAX,CAA1B;AACAE,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACM,SAAD,EAAWD,aAAX,CAA1B;AACAK,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACM,SAAD,EAAWG,YAAX,CAA1B;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACI,UAAD,EAAYK,YAAZ,CAA1B;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACO,SAAD,EAAWE,YAAX,CAA1B;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACO,SAAD,EAAWF,aAAX,CAA1B;AACAK,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACO,SAAD,EAAWC,WAAX,CAA1B;AACAE,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACI,UAAD,EAAYI,WAAZ,CAA1B;AACA,SAAOE,OAAP;AACD;;AAED,SAASE,+BAAT,CAAyCC,KAAzC,EAAgDC,KAAhD,EAAsD;AACpD;AACA;AACA,MAAIC,GAAG,GAAGF,KAAK,CAACG,MAAhB;AACA,MAAIC,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUJ,GAAV,CAAd;AACA,MAAIX,UAAU,GAAGc,IAAI,CAACE,KAAL,CAAWN,KAAK,GAAGG,OAAnB,CAAjB,CALoD,CAKP;;AAC7C,MAAIZ,aAAa,GAAIS,KAAK,GAAGG,OAA7B;AACA;;;;;;AAKA,MAAIX,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,YAAY,GAAG,CAAnB;;AAEA,MAAIL,UAAU,KAAK,CAAnB,EAAsB;AACpBE,IAAAA,SAAS,GAAG,EAAZ;AACD,GAFD,MAEO;AACLA,IAAAA,SAAS,GAAGF,UAAU,GAAG,CAAzB;AACD;;AAED,MAAIA,UAAU,KAAK,EAAnB,EAAuB;AACrBG,IAAAA,SAAS,GAAG,CAAZ;AACD,GAFD,MAEO;AACLA,IAAAA,SAAS,GAAGH,UAAU,GAAG,CAAzB;AACD;;AAED,MAAIC,aAAa,KAAK,EAAtB,EAA0B;AACxBI,IAAAA,YAAY,GAAG,CAAf;AACD,GAFD,MAEO;AACLA,IAAAA,YAAY,GAAGJ,aAAa,GAAG,CAA/B;AACD;;AAED,MAAIA,aAAa,KAAK,CAAtB,EAAyB;AACvBG,IAAAA,WAAW,GAAG,EAAd;AACD,GAFD,MAEO;AACLA,IAAAA,WAAW,GAAGH,aAAa,GAAG,CAA9B;AACD;;AAGD,MAAIgB,kBAAkB,GAAGlB,uBAAuB,CAACC,UAAD,EAAaC,aAAb,EAA4BC,SAA5B,EAAuCC,SAAvC,EAAkDC,WAAlD,EAA+DC,YAA/D,CAAhD;AACA,MAAIa,YAAY,GAAG,CAAnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA2B;AACzB,QAAIV,KAAK,CAACQ,kBAAkB,CAACE,CAAD,CAAnB,CAAT,EAAiC;AAC/BD,MAAAA,YAAY;AACb;AACF;;AAED,SAAOA,YAAP;AACD;;AAED,SAASE,iBAAT,CAA2BX,KAA3B,EAAiC;AAC/BY,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,MAAIC,QAAQ,GAAG,EAAf,CAF+B,CAG/B;;AACE,MAAIL,YAAY,GAAGV,+BAA+B,CAACC,KAAD,EAAQ,IAAR,CAAlD,CAJ6B,CAK/B;;AACA,SAAOc,QAAP;AACD;;AAED,MAAMC,QAAN,SAAuB7B,SAAvB,CAAiC;AAE/B8B,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAUnBC,WAVmB,GAULC,KAAK,IAAI;AACrB,UAAG,KAAKF,KAAL,CAAWG,SAAX,KAAyB,KAA5B,EAAkC;AAChC,aAAKH,KAAL,CAAWI,YAAX,CAAwBV,iBAAiB,CAAC,KAAKW,KAAL,CAAWtB,KAAZ,CAAzC,EAA8D,KAAKsB,KAAL,CAAWC,UAAX,GAAsB,CAApF;AACD;AACF,KAdkB;;AAEjB,SAAKD,KAAL,GAAa;AACXtB,MAAAA,KAAK,EAAEiB,KAAK,CAACjB,KADF;AAEXwB,MAAAA,KAAK,EAAEP,KAAK,CAACO,KAFF;AAGXJ,MAAAA,SAAS,EAAEH,KAAK,CAACG,SAHN;AAIXG,MAAAA,UAAU,EAAEN,KAAK,CAACM;AAJP,KAAb;AAMD;;AAQDE,EAAAA,MAAM,GAAG;AACP,WACE;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,OAAO,EAAEN,KAAK,IAAI,KAAKD,WAAL,CAAiBC,KAAjB,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAkB,KAAKG,KAAL,CAAWC,UAA7B,CAFF;AAIA;;;;;;AAKA;;AAXF;AAaD;;AAhC8B;;AAmCjC,eAAeR,QAAf","sourcesContent":["import React, { Component } from 'react';\n\n\n  /*\n    Rules:\n    If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.\n    If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.\n  */\n \nfunction generateIndex(row, column){\n  return row*50+column\n}\n\nfunction calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column){\n  let indices = []\n  indices.push(generateIndex(row_above,left_column))\n  indices.push(generateIndex(row_above,currentColumn))\n  indices.push(generateIndex(row_above,right_column))\n  indices.push(generateIndex(currentRow,right_column))\n  indices.push(generateIndex(row_below,right_column))\n  indices.push(generateIndex(row_below,currentColumn))\n  indices.push(generateIndex(row_below,left_column))\n  indices.push(generateIndex(currentRow,left_column))\n  return indices\n}\n\nfunction determineNumberOfAliveNeighbors(board, index){\n  //default 2500 (50x50)\n  //this approach should work for any board of equal height/width\n  let len = board.length\n  let numRows = Math.sqrt(len)\n  let currentRow = Math.floor(index / numRows) //btw 1-50\n  let currentColumn = (index % numRows)\n  /*\n  console.log(\"row: \" + currentRow)\n  console.log(\"column: \" + currentColumn)\n  console.log(\"index: \" + generateIndex(currentRow,currentColumn))\n  */\n  let row_above = 0\n  let row_below = 0\n  let left_column = 0\n  let right_column = 0\n\n  if (currentRow === 0) {\n    row_above = 49\n  } else {\n    row_above = currentRow + 1\n  }\n\n  if (currentRow === 49) {\n    row_below = 0\n  } else {\n    row_below = currentRow - 1\n  }\n\n  if (currentColumn === 49) {\n    right_column = 0\n  } else {\n    right_column = currentColumn + 1\n  }\n\n  if (currentColumn === 0) {\n    left_column = 49\n  } else {\n    left_column = currentColumn - 1\n  }\n\n\n  let indicesOfNeighbors = calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column)\n  let numNeighbors = 0\n  for (let i = 0; i < 9; i++){\n    if (board[indicesOfNeighbors[i]]){\n      numNeighbors++;\n    }\n  }\n\n  return numNeighbors\n}\n\nfunction iterateGeneration(board){\n  console.log(\"!\")\n  let newBoard = []\n  //for (let c = 0; c < 2500; c++){\n    let numNeighbors = determineNumberOfAliveNeighbors(board, 1329)\n  //}\n  return newBoard\n}\n\nclass Controls extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: props.board,\n      delay: props.delay,\n      isRunning: props.isRunning,\n      generation: props.generation\n    };\n  }\n\n  handleClick = event => {\n    if(this.props.isRunning === false){\n      this.props.iterateBoard(iterateGeneration(this.state.board), (this.state.generation+1));\n    }\n  };\n\n  render() {\n    return(\n      //<Iterate />\n      <div>\n        <button onClick={event => this.handleClick(event)} >Iterate</button>\n        <div>Generation: {this.state.generation}</div>\n      </div>\n      /*\n      <Start />\n      <Stop />\n      <Clear />\n      */\n      /*<Speed />*/\n    );\n  }\n}\n\nexport default Controls;"]},"metadata":{},"sourceType":"module"}