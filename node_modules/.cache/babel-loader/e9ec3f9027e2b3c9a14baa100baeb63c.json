{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/components/Board.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: row;\\n  width: 500px;\\n  height: 500px;\\n  background-color: gray;\\n  margin: 0 auto;\\n  flex-wrap: wrap;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport Cell from './Cell';\nimport styled from 'styled-components';\nconst BoardContainer = styled.div(_templateObject()); //I don't think I need a class for board, fix this later\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = event => {\n      console.log(this.state.currentState);\n\n      if (this.props.isRunning === false) {\n        console.log(this.state.currentState);\n        let board = this.state.board;\n        board[this.state.id] = !board[this.state.id];\n        this.props.toggleCellUpdate(board);\n      }\n    };\n\n    this.state = {\n      board: props.board,\n      delay: props.delay\n    };\n  }\n\n  render() {\n    return React.createElement(BoardContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, this.props.board.map((cell, index) => React.createElement(Cell, {\n      onClick: event => this.handleClick(event),\n      isAlive: cell,\n      id: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/components/Board.js"],"names":["React","Component","Cell","styled","BoardContainer","div","Board","constructor","props","handleClick","event","console","log","state","currentState","isRunning","board","id","toggleCellUpdate","delay","render","map","cell","index"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,cAAc,GAAGD,MAAM,CAACE,GAAV,mBAApB,C,CAUA;;AACA,MAAMC,KAAN,SAAoBL,SAApB,CAA8B;AAE5BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBC,WARmB,GAQLC,KAAK,IAAI;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,YAAvB;;AACA,UAAG,KAAKN,KAAL,CAAWO,SAAX,KAAyB,KAA5B,EAAkC;AAChCJ,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,YAAvB;AACA,YAAIE,KAAK,GAAG,KAAKH,KAAL,CAAWG,KAAvB;AACAA,QAAAA,KAAK,CAAC,KAAKH,KAAL,CAAWI,EAAZ,CAAL,GAAuB,CAACD,KAAK,CAAC,KAAKH,KAAL,CAAWI,EAAZ,CAA7B;AACA,aAAKT,KAAL,CAAWU,gBAAX,CAA4BF,KAA5B;AACD;AACF,KAhBkB;;AAEjB,SAAKH,KAAL,GAAa;AACXG,MAAAA,KAAK,EAAER,KAAK,CAACQ,KADF;AAEXG,MAAAA,KAAK,EAAEX,KAAK,CAACW;AAFF,KAAb;AAID;;AAYDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKZ,KAAL,CAAWQ,KAAX,CAAiBK,GAAjB,CAAqB,CAACC,IAAD,EAAOC,KAAP,KACpB,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAEb,KAAK,IAAI,KAAKD,WAAL,CAAiBC,KAAjB,CAAxB;AAAiD,MAAA,OAAO,EAAEY,IAA1D;AAAgE,MAAA,EAAE,EAAEC,KAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF;AAOD;;AA5B2B;;AA+B9B,eAAejB,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport Cell from './Cell';\nimport styled from 'styled-components';\n\nconst BoardContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 500px;\n  height: 500px;\n  background-color: gray;\n  margin: 0 auto;\n  flex-wrap: wrap;\n`;\n\n//I don't think I need a class for board, fix this later\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: props.board,\n      delay: props.delay,\n    };\n  }\n\n  handleClick = event => {\n    console.log(this.state.currentState)\n    if(this.props.isRunning === false){\n      console.log(this.state.currentState)\n      let board = this.state.board\n      board[this.state.id] = !board[this.state.id]\n      this.props.toggleCellUpdate(board);\n    }\n  }\n\n  render() {\n    return (\n      <BoardContainer>\n        {this.props.board.map((cell, index) => (\n          <Cell onClick={event => this.handleClick(event)} isAlive={cell} id={index} />\n        ))}\n      </BoardContainer>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}