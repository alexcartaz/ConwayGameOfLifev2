{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls'; //import { iterateBoard } from './actions/';\n\n/*\n***************  Life game code  *************\n */\n\nfunction generateIndex(row, column) {\n  return row * 50 + column;\n}\n\nfunction calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column) {\n  let indices = [];\n  indices.push(generateIndex(row_above, left_column));\n  indices.push(generateIndex(row_above, currentColumn));\n  indices.push(generateIndex(row_above, right_column));\n  indices.push(generateIndex(currentRow, right_column));\n  indices.push(generateIndex(row_below, right_column));\n  indices.push(generateIndex(row_below, currentColumn));\n  indices.push(generateIndex(row_below, left_column));\n  indices.push(generateIndex(currentRow, left_column));\n  return indices;\n}\n\nfunction determineNumberOfAliveNeighbors(board, index) {\n  //default 2500 (50x50)\n  //this approach should work for any board of equal height/width\n  let len = board.length;\n  let numRows = Math.sqrt(len);\n  let currentRow = Math.floor(index / numRows); //btw 1-50\n\n  let currentColumn = index % numRows;\n  /*\n  console.log(\"row: \" + currentRow)\n  console.log(\"column: \" + currentColumn)\n  console.log(\"index: \" + generateIndex(currentRow,currentColumn))\n  */\n\n  let row_above = 0;\n  let row_below = 0;\n  let left_column = 0;\n  let right_column = 0;\n\n  if (currentRow === 0) {\n    row_above = 49;\n  } else {\n    row_above = currentRow + 1;\n  }\n\n  if (currentRow === 49) {\n    row_below = 0;\n  } else {\n    row_below = currentRow - 1;\n  }\n\n  if (currentColumn === 49) {\n    right_column = 0;\n  } else {\n    right_column = currentColumn + 1;\n  }\n\n  if (currentColumn === 0) {\n    left_column = 49;\n  } else {\n    left_column = currentColumn - 1;\n  }\n\n  let indicesOfNeighbors = calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column);\n  let numNeighbors = 0;\n\n  for (let i = 0; i < 9; i++) {\n    if (board[indicesOfNeighbors[i]]) {\n      numNeighbors++;\n    }\n  }\n\n  return numNeighbors;\n}\n/*\n Rules:\n If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.\n If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.\n*/\n\n\nfunction iterateGeneration(board) {\n  let newBoard = [];\n\n  for (let c = 0; c < 2500; c++) {\n    let numNeighbors = determineNumberOfAliveNeighbors(board, c);\n\n    if (numNeighbors > 0 || c === 2450) {//console.log(\"index: \" + c)\n      //console.log(\"numN: \" + numNeighbors)\n      //console.log(board)\n    }\n\n    if (board[c] && (numNeighbors === 2 || numNeighbors === 3)) {\n      newBoard[c] = false;\n    } else if (!board[c] && numNeighbors === 3) {\n      newBoard[c] = true;\n    } else {\n      newBoard[c] = false;\n    }\n  }\n\n  return newBoard;\n}\n\nfunction initBoard() {\n  let board = [];\n  let randomSeed = 0; //this config makes every 1 in 10 random squares in 100x100\n\n  for (let c = 0; c < 2500; c++) {\n    randomSeed = Math.floor(Math.random() * 11);\n\n    if (randomSeed === 0) {\n      board[c] = true;\n    } else {\n      board[c] = false;\n    }\n  }\n\n  return board;\n}\n/*\n***********************************************\n */\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.onIterate = this.onIterate.bind(this);\n    this.state = {\n      //board: initBoard(),\n      isRunning: false,\n      board: initBoard(),\n      delay: 2,\n      //ms\n      generation: 0,\n      iterating: false,\n      error: null\n    };\n    this.currentBoard = this.state.board.concat([]);\n  } //only need to store values on state that are needed to trigger component re-renders\n  //removed board from state since onClick cell and button clicks (iterate, etc.) are\n  //all thats needed for re-render (not board itself)\n  //-can probably use generation for loop increment re-render if i hit issues\n  //once working, i should refactor to remove anything else from state not used for re-render\n\n\n  onCellClick(id) {\n    console.log('cell click');\n    this.currentBoard[id] = !this.currentBoard[id];\n  }\n\n  onIterate() {\n    console.log('*iterating*');\n    let newBoard = iterateGeneration(this.currentBoard);\n    console.log('does newBoard == oldBoard? ' + (newBoard === this.state.board));\n    this.currentBoard = newBoard;\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        generation: prevState.generation + 1,\n        board: newBoard.concat([])\n      });\n    });\n  } //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  //<Controls board={this.props.board} generation={generation} isRunning={isRunning} delay={delay} onIterateClick={this.onIterateClick} />\n\n\n  render() {\n    let _this$state = this.state,\n        isRunning = _this$state.isRunning,\n        generation = _this$state.generation,\n        delay = _this$state.delay;\n    console.log(this.state.board);\n    console.log(this.currentBoard);\n    console.log('does state.board == currentBoard? ' + this.state.board === this.currentBoard);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: this.state.board,\n      isRunning: isRunning,\n      onClick: this.onCellClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(Controls, {\n      board: this.state.board,\n      generation: generation,\n      isRunning: isRunning,\n      delay: delay,\n      onIterateClick: this.onIterate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/App.js"],"names":["React","Component","Board","Controls","generateIndex","row","column","calcIndiciesOfNeighbors","currentRow","currentColumn","row_above","row_below","left_column","right_column","indices","push","determineNumberOfAliveNeighbors","board","index","len","length","numRows","Math","sqrt","floor","indicesOfNeighbors","numNeighbors","i","iterateGeneration","newBoard","c","initBoard","randomSeed","random","App","constructor","props","onCellClick","bind","onIterate","state","isRunning","delay","generation","iterating","error","currentBoard","concat","id","console","log","setState","prevState","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB,C,CACA;;AAGA;;;;AAGA,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,MAA5B,EAAmC;AACjC,SAAOD,GAAG,GAAC,EAAJ,GAAOC,MAAd;AACD;;AAED,SAASC,uBAAT,CAAiCC,UAAjC,EAA6CC,aAA7C,EAA4DC,SAA5D,EAAuEC,SAAvE,EAAkFC,WAAlF,EAA+FC,YAA/F,EAA4G;AAC1G,MAAIC,OAAO,GAAG,EAAd;AACAA,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACM,SAAD,EAAWE,WAAX,CAA1B;AACAE,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACM,SAAD,EAAWD,aAAX,CAA1B;AACAK,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACM,SAAD,EAAWG,YAAX,CAA1B;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACI,UAAD,EAAYK,YAAZ,CAA1B;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACO,SAAD,EAAWE,YAAX,CAA1B;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACO,SAAD,EAAWF,aAAX,CAA1B;AACAK,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACO,SAAD,EAAWC,WAAX,CAA1B;AACAE,EAAAA,OAAO,CAACC,IAAR,CAAaX,aAAa,CAACI,UAAD,EAAYI,WAAZ,CAA1B;AACA,SAAOE,OAAP;AACD;;AAED,SAASE,+BAAT,CAAyCC,KAAzC,EAAgDC,KAAhD,EAAsD;AACpD;AACA;AACA,MAAIC,GAAG,GAAGF,KAAK,CAACG,MAAhB;AACA,MAAIC,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUJ,GAAV,CAAd;AACA,MAAIX,UAAU,GAAGc,IAAI,CAACE,KAAL,CAAWN,KAAK,GAAGG,OAAnB,CAAjB,CALoD,CAKP;;AAC7C,MAAIZ,aAAa,GAAIS,KAAK,GAAGG,OAA7B;AACA;;;;;;AAKA,MAAIX,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,YAAY,GAAG,CAAnB;;AAEA,MAAIL,UAAU,KAAK,CAAnB,EAAsB;AACpBE,IAAAA,SAAS,GAAG,EAAZ;AACD,GAFD,MAEO;AACLA,IAAAA,SAAS,GAAGF,UAAU,GAAG,CAAzB;AACD;;AAED,MAAIA,UAAU,KAAK,EAAnB,EAAuB;AACrBG,IAAAA,SAAS,GAAG,CAAZ;AACD,GAFD,MAEO;AACLA,IAAAA,SAAS,GAAGH,UAAU,GAAG,CAAzB;AACD;;AAED,MAAIC,aAAa,KAAK,EAAtB,EAA0B;AACxBI,IAAAA,YAAY,GAAG,CAAf;AACD,GAFD,MAEO;AACLA,IAAAA,YAAY,GAAGJ,aAAa,GAAG,CAA/B;AACD;;AAED,MAAIA,aAAa,KAAK,CAAtB,EAAyB;AACvBG,IAAAA,WAAW,GAAG,EAAd;AACD,GAFD,MAEO;AACLA,IAAAA,WAAW,GAAGH,aAAa,GAAG,CAA9B;AACD;;AAGD,MAAIgB,kBAAkB,GAAGlB,uBAAuB,CAACC,UAAD,EAAaC,aAAb,EAA4BC,SAA5B,EAAuCC,SAAvC,EAAkDC,WAAlD,EAA+DC,YAA/D,CAAhD;AACA,MAAIa,YAAY,GAAG,CAAnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA2B;AACzB,QAAIV,KAAK,CAACQ,kBAAkB,CAACE,CAAD,CAAnB,CAAT,EAAiC;AAC/BD,MAAAA,YAAY;AACb;AACF;;AAED,SAAOA,YAAP;AACD;AAEA;;;;;;;AAMD,SAASE,iBAAT,CAA2BX,KAA3B,EAAiC;AAC/B,MAAIY,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAA8B;AAC5B,QAAIJ,YAAY,GAAGV,+BAA+B,CAACC,KAAD,EAAQa,CAAR,CAAlD;;AAEA,QAAIJ,YAAY,GAAG,CAAf,IAAoBI,CAAC,KAAG,IAA5B,EAAkC,CAChC;AACA;AACA;AACD;;AAED,QAAIb,KAAK,CAACa,CAAD,CAAL,KAAaJ,YAAY,KAAG,CAAf,IAAoBA,YAAY,KAAG,CAAhD,CAAJ,EAAuD;AACrDG,MAAAA,QAAQ,CAACC,CAAD,CAAR,GAAc,KAAd;AACD,KAFD,MAEM,IAAG,CAACb,KAAK,CAACa,CAAD,CAAN,IAAaJ,YAAY,KAAG,CAA/B,EAAiC;AACrCG,MAAAA,QAAQ,CAACC,CAAD,CAAR,GAAc,IAAd;AACD,KAFK,MAED;AACHD,MAAAA,QAAQ,CAACC,CAAD,CAAR,GAAc,KAAd;AACD;AACF;;AACD,SAAOD,QAAP;AACD;;AAED,SAASE,SAAT,GAAoB;AAClB,MAAId,KAAK,GAAG,EAAZ;AACA,MAAIe,UAAU,GAAG,CAAjB,CAFkB,CAGlB;;AACA,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAA8B;AAC5BE,IAAAA,UAAU,GAAGV,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACW,MAAL,KAAgB,EAA3B,CAAb;;AACA,QAAID,UAAU,KAAK,CAAnB,EAAsB;AACpBf,MAAAA,KAAK,CAACa,CAAD,CAAL,GAAW,IAAX;AACD,KAFD,MAEK;AACHb,MAAAA,KAAK,CAACa,CAAD,CAAL,GAAW,KAAX;AACD;AACF;;AACD,SAAOb,KAAP;AACD;AACD;;;;;AAKA,MAAMiB,GAAN,SAAkBjC,SAAlB,CAA4B;AAC1BkC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKE,KAAL,GAAa;AACX;AACAC,MAAAA,SAAS,EAAE,KAFA;AAGXxB,MAAAA,KAAK,EAAEc,SAAS,EAHL;AAIXW,MAAAA,KAAK,EAAE,CAJI;AAID;AACVC,MAAAA,UAAU,EAAE,CALD;AAMXC,MAAAA,SAAS,EAAE,KANA;AAOXC,MAAAA,KAAK,EAAE;AAPI,KAAb;AASA,SAAKC,YAAL,GAAoB,KAAKN,KAAL,CAAWvB,KAAX,CAAiB8B,MAAjB,CAAwB,EAAxB,CAApB;AACD,GAfyB,CAiB1B;AACA;AACA;AACA;AACA;;;AACAV,EAAAA,WAAW,CAACW,EAAD,EAAK;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,SAAKJ,YAAL,CAAkBE,EAAlB,IAAwB,CAAC,KAAKF,YAAL,CAAkBE,EAAlB,CAAzB;AACD;;AAEDT,EAAAA,SAAS,GAAE;AACTU,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,QAAIrB,QAAQ,GAAGD,iBAAiB,CAAC,KAAKkB,YAAN,CAAhC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCrB,QAAQ,KAAK,KAAKW,KAAL,CAAWvB,KAAzD,CAAZ;AACA,SAAK6B,YAAL,GAAoBjB,QAApB;AACA,SAAKsB,QAAL,CAAcC,SAAS,IAAI;AACzB,+BACKA,SADL;AAEET,QAAAA,UAAU,EAAES,SAAS,CAACT,UAAV,GAAuB,CAFrC;AAGE1B,QAAAA,KAAK,EAAEY,QAAQ,CAACkB,MAAT,CAAgB,EAAhB;AAHT;AAKD,KAND;AAOD,GAvCyB,CAyC1B;AACA;;;AAEAM,EAAAA,MAAM,GAAG;AAAA,sBAC8B,KAAKb,KADnC;AAAA,QACFC,SADE,eACFA,SADE;AAAA,QACSE,UADT,eACSA,UADT;AAAA,QACqBD,KADrB,eACqBA,KADrB;AAEPO,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWvB,KAAvB;AACAgC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,YAAjB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAuC,KAAKV,KAAL,CAAWvB,KAAlD,KAA4D,KAAK6B,YAA7E;AACA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWvB,KAAzB;AAAgC,MAAA,SAAS,EAAEwB,SAA3C;AAAsD,MAAA,OAAO,EAAE,KAAKJ,WAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAKG,KAAL,CAAWvB,KAA5B;AAAmC,MAAA,UAAU,EAAE0B,UAA/C;AAA2D,MAAA,SAAS,EAAEF,SAAtE;AAAiF,MAAA,KAAK,EAAEC,KAAxF;AAA+F,MAAA,cAAc,EAAE,KAAKH,SAApH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAvDyB;;AA0D5B,eAAeL,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\n//import { iterateBoard } from './actions/';\n\n\n/*\n***************  Life game code  *************\n */\nfunction generateIndex(row, column){\n  return row*50+column\n}\n\nfunction calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column){\n  let indices = []\n  indices.push(generateIndex(row_above,left_column))\n  indices.push(generateIndex(row_above,currentColumn))\n  indices.push(generateIndex(row_above,right_column))\n  indices.push(generateIndex(currentRow,right_column))\n  indices.push(generateIndex(row_below,right_column))\n  indices.push(generateIndex(row_below,currentColumn))\n  indices.push(generateIndex(row_below,left_column))\n  indices.push(generateIndex(currentRow,left_column))\n  return indices\n}\n\nfunction determineNumberOfAliveNeighbors(board, index){\n  //default 2500 (50x50)\n  //this approach should work for any board of equal height/width\n  let len = board.length\n  let numRows = Math.sqrt(len)\n  let currentRow = Math.floor(index / numRows) //btw 1-50\n  let currentColumn = (index % numRows)\n  /*\n  console.log(\"row: \" + currentRow)\n  console.log(\"column: \" + currentColumn)\n  console.log(\"index: \" + generateIndex(currentRow,currentColumn))\n  */\n  let row_above = 0\n  let row_below = 0\n  let left_column = 0\n  let right_column = 0\n\n  if (currentRow === 0) {\n    row_above = 49\n  } else {\n    row_above = currentRow + 1\n  }\n\n  if (currentRow === 49) {\n    row_below = 0\n  } else {\n    row_below = currentRow - 1\n  }\n\n  if (currentColumn === 49) {\n    right_column = 0\n  } else {\n    right_column = currentColumn + 1\n  }\n\n  if (currentColumn === 0) {\n    left_column = 49\n  } else {\n    left_column = currentColumn - 1\n  }\n\n\n  let indicesOfNeighbors = calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column)\n  let numNeighbors = 0\n  for (let i = 0; i < 9; i++){\n    if (board[indicesOfNeighbors[i]]){\n      numNeighbors++;\n    }\n  }\n\n  return numNeighbors\n}\n\n /*\n  Rules:\n  If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.\n  If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.\n*/\n\nfunction iterateGeneration(board){\n  let newBoard = []\n  for (let c = 0; c < 2500; c++){\n    let numNeighbors = determineNumberOfAliveNeighbors(board, c)\n    \n    if (numNeighbors > 0 || c===2450) {\n      //console.log(\"index: \" + c)\n      //console.log(\"numN: \" + numNeighbors)\n      //console.log(board)\n    }\n    \n    if (board[c] && (numNeighbors===2 || numNeighbors===3)){\n      newBoard[c] = false\n    }else if(!board[c] && numNeighbors===3){\n      newBoard[c] = true\n    }else{\n      newBoard[c] = false\n    }\n  }\n  return newBoard\n}\n\nfunction initBoard(){\n  let board = []\n  let randomSeed = 0\n  //this config makes every 1 in 10 random squares in 100x100\n  for (let c = 0; c < 2500; c++){\n    randomSeed = Math.floor(Math.random() * 11);\n    if (randomSeed === 0) {\n      board[c] = true\n    }else{\n      board[c] = false\n    }\n  }\n  return board\n}\n/*\n***********************************************\n */\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.onIterate = this.onIterate.bind(this);\n    this.state = {\n      //board: initBoard(),\n      isRunning: false,\n      board: initBoard(),\n      delay: 2, //ms\n      generation: 0,\n      iterating: false,\n      error: null\n    };\n    this.currentBoard = this.state.board.concat([]);\n  }\n\n  //only need to store values on state that are needed to trigger component re-renders\n  //removed board from state since onClick cell and button clicks (iterate, etc.) are\n  //all thats needed for re-render (not board itself)\n  //-can probably use generation for loop increment re-render if i hit issues\n  //once working, i should refactor to remove anything else from state not used for re-render\n  onCellClick(id) {\n    console.log('cell click')\n    this.currentBoard[id] = !this.currentBoard[id]\n  };\n\n  onIterate(){\n    console.log('*iterating*')\n    let newBoard = iterateGeneration(this.currentBoard)\n    console.log('does newBoard == oldBoard? ' + (newBoard === this.state.board))\n    this.currentBoard = newBoard\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        generation: prevState.generation + 1,\n        board: newBoard.concat([])\n      };\n    });\n  }\n\n  //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  //<Controls board={this.props.board} generation={generation} isRunning={isRunning} delay={delay} onIterateClick={this.onIterateClick} />\n      \n  render() {\n    let {isRunning, generation, delay} = this.state\n    console.log(this.state.board)\n    console.log(this.currentBoard)\n    console.log('does state.board == currentBoard? ' + this.state.board === this.currentBoard)\n    return (\n      <div className=\"App\">\n        <Board board={this.state.board} isRunning={isRunning} onClick={this.onCellClick} />\n        <Controls board={this.state.board} generation={generation} isRunning={isRunning} delay={delay} onIterateClick={this.onIterate} />\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}