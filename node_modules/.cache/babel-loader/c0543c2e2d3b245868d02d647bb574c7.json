{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\nimport { iterateBoard, toggleCellUpdate } from './actions/';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.state = {\n      board: props.board\n    };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps, prevState) {}\n\n  onCellClick(id) {\n    console.log('**');\n    let board = this.props.board;\n    console.log(this.props.board[id]);\n    board[id] = !board[id];\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        board: board //board.concat([])\n\n      });\n    });\n    console.log(this.props.board[id]); //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  }\n\n  render() {\n    console.log(this.state.board[0]);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: this.state.board,\n      isRunning: this.props.isRunning,\n      onClick: this.onCellClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(Controls, Object.assign({}, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  iterateBoard,\n  toggleCellUpdate\n})(App);","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/App.js"],"names":["React","Component","Board","Controls","connect","iterateBoard","toggleCellUpdate","App","constructor","props","onCellClick","bind","state","board","componentDidMount","componentDidUpdate","prevProps","prevState","id","console","log","setState","render","isRunning","mapStateToProps","delay","generation","iterating","error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,YAA/C;;AAGA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAC1BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEJ,KAAK,CAACI;AADF,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG,CACnB;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB,CACvC;;AAEDP,EAAAA,WAAW,CAACQ,EAAD,EAAK;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,QAAIP,KAAK,GAAG,KAAKJ,KAAL,CAAWI,KAAvB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWI,KAAX,CAAiBK,EAAjB,CAAZ;AACAL,IAAAA,KAAK,CAACK,EAAD,CAAL,GAAY,CAACL,KAAK,CAACK,EAAD,CAAlB;AACA,SAAKG,QAAL,CAAcJ,SAAS,IAAI;AACzB,+BACKA,SADL;AAEEJ,QAAAA,KAAK,EAAEA,KAFT,CAEe;;AAFf;AAID,KALD;AAOAM,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWI,KAAX,CAAiBK,EAAjB,CAAZ,EAZc,CAad;AACD;;AACDI,EAAAA,MAAM,GAAG;AACPH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWC,KAAX,CAAiB,CAAjB,CAAZ;AACA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAzB;AAAgC,MAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWc,SAAtD;AAAiE,MAAA,OAAO,EAAE,KAAKb,WAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,QAAD,oBAAc,KAAKD,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFF,CADF;AAMD;;AAtCyB;;AAyC5B,MAAMe,eAAe,GAAGZ,KAAK,KAAK;AAChCC,EAAAA,KAAK,EAAED,KAAK,CAACC,KADmB;AAEhCY,EAAAA,KAAK,EAAEb,KAAK,CAACa,KAFmB;AAGhCF,EAAAA,SAAS,EAAEX,KAAK,CAACW,SAHe;AAIhCG,EAAAA,UAAU,EAAE,CAJoB;AAKhCC,EAAAA,SAAS,EAAE,KALqB;AAMhCC,EAAAA,KAAK,EAAEhB,KAAK,CAACgB;AANmB,CAAL,CAA7B;;AASA,eAAexB,OAAO,CACpBoB,eADoB,EAEpB;AAAEnB,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAFoB,CAAP,CAGbC,GAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\nimport { iterateBoard, toggleCellUpdate } from './actions/';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.state = {\n      board: props.board\n    };\n  } \n\n  componentDidMount() {\n  }\n\n  componentDidUpdate(prevProps, prevState){\n  }\n\n  onCellClick(id) {\n    console.log('**');\n    let board = this.props.board\n    console.log(this.props.board[id]);\n    board[id] = !board[id]\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        board: board //board.concat([])\n      };\n    });\n\n    console.log(this.props.board[id]);\n    //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  };\n  render() {\n    console.log(this.state.board[0]);\n    return (\n      <div className=\"App\">\n        <Board board={this.state.board} isRunning={this.props.isRunning} onClick={this.onCellClick} />\n        <Controls {...this.props} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(\n  mapStateToProps,\n  { iterateBoard, toggleCellUpdate }\n)(App);"]},"metadata":{},"sourceType":"module"}