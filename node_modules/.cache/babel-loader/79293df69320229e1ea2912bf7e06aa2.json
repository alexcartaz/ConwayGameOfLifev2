{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\nimport { iterateBoard, toggleCellUpdate } from './actions/';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this); //this.state = {\n    //};\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps, prevState) {}\n\n  onCellClick(id) {\n    console.log('**');\n    let board = this.props.board;\n    console.log(this.props.board[id]);\n    board[id] = !board[id];\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        board: board\n      });\n    });\n    console.log(this.props.board[id]); //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  }\n\n  //<Board {...this.props} onClick={this.onCellClick}/>\n  render() {\n    if (this.props.iterating) {\n      console.log('-------------- LOADING --------------');\n      return React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Board, {\n        board: this.props.board,\n        isRunning: this.props.isRunning,\n        onClick: this.onCellClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(Controls, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      })));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  iterateBoard,\n  toggleCellUpdate\n})(App);","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/App.js"],"names":["React","Component","Board","Controls","connect","iterateBoard","toggleCellUpdate","App","constructor","props","onCellClick","bind","componentDidMount","componentDidUpdate","prevProps","prevState","id","console","log","board","setState","render","iterating","isRunning","mapStateToProps","state","delay","generation","error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,YAA/C;;AAGA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAC1BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB,CAFiB,CAGjB;AACA;AACD;;AAEDC,EAAAA,iBAAiB,GAAG,CACnB;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB,CACvC;;AAEDL,EAAAA,WAAW,CAACM,EAAD,EAAK;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,QAAIC,KAAK,GAAG,KAAKV,KAAL,CAAWU,KAAvB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWU,KAAX,CAAiBH,EAAjB,CAAZ;AACAG,IAAAA,KAAK,CAACH,EAAD,CAAL,GAAY,CAACG,KAAK,CAACH,EAAD,CAAlB;AACA,SAAKI,QAAL,CAAcL,SAAS,IAAI;AACzB,+BACKA,SADL;AAEEI,QAAAA,KAAK,EAAEA;AAFT;AAID,KALD;AAMAF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWU,KAAX,CAAiBH,EAAjB,CAAZ,EAXc,CAYd;AACD;;AACD;AACAK,EAAAA,MAAM,GAAG;AACP,QAAG,KAAKZ,KAAL,CAAWa,SAAd,EAAwB;AACtBL,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAHD,MAGK;AACH,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE,KAAKT,KAAL,CAAWU,KAAzB;AAAgC,QAAA,SAAS,EAAE,KAAKV,KAAL,CAAWc,SAAtD;AAAiE,QAAA,OAAO,EAAE,KAAKb,WAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,QAAD,oBAAc,KAAKD,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,CADF;AAMD;AACF;;AAzCyB;;AA4C5B,MAAMe,eAAe,GAAGC,KAAK,KAAK;AAChCN,EAAAA,KAAK,EAAEM,KAAK,CAACN,KADmB;AAEhCO,EAAAA,KAAK,EAAED,KAAK,CAACC,KAFmB;AAGhCH,EAAAA,SAAS,EAAEE,KAAK,CAACF,SAHe;AAIhCI,EAAAA,UAAU,EAAE,CAJoB;AAKhCL,EAAAA,SAAS,EAAE,KALqB;AAMhCM,EAAAA,KAAK,EAAEH,KAAK,CAACG;AANmB,CAAL,CAA7B;;AASA,eAAexB,OAAO,CACpBoB,eADoB,EAEpB;AAAEnB,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAFoB,CAAP,CAGbC,GAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\nimport { iterateBoard, toggleCellUpdate } from './actions/';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    //this.state = {\n    //};\n  } \n\n  componentDidMount() {\n  }\n\n  componentDidUpdate(prevProps, prevState){\n  }\n\n  onCellClick(id) {\n    console.log('**');\n    let board = this.props.board\n    console.log(this.props.board[id]);\n    board[id] = !board[id]\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        board: board\n      };\n    });\n    console.log(this.props.board[id]);\n    //need code here to surpress entire board refresh and manage new cell appearance with toggle state \n  };\n  //<Board {...this.props} onClick={this.onCellClick}/>\n  render() {\n    if(this.props.iterating){\n      console.log('-------------- LOADING --------------');\n      return <h4>Loading...</h4>\n    }else{\n      return (\n        <div className=\"App\">\n          <Board board={this.props.board} isRunning={this.props.isRunning} onClick={this.onCellClick}/>\n          <Controls {...this.props} />\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(\n  mapStateToProps,\n  { iterateBoard, toggleCellUpdate }\n)(App);"]},"metadata":{},"sourceType":"module"}