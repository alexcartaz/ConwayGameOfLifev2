{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _taggedTemplateLiteral from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/components/Cell.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  border: .5px solid black;\\n  width: 9px;\\n  height: 9px;\\n  border-radius: 25%;\\n  background-color : black;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  border: .5px solid black;\\n  width: 9px;\\n  height: 9px;\\n  border-radius: 25%;\\n  background-color : green;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n/*\nconst LifeCell = styled.div`\n  border: .5px solid black;\n  width: 9px;\n  height: 9px;\n  border-radius: 25%;\n  background-color : ${state => {\n    //I don't fully understand how passing values into this works\n    console.log('color: ' + state.isAlive)\n    if(state.isAlive === true){\n      return 'green';\n    } else {\n      return 'black';\n    }\n  }};\n`;\n*/\n//look into Style (React)\n//<div style={{ background: ‘black’, width: 100, height: 100 }} />\n//const style = {...}\n\nconst LifeCellAlive = styled.div(_templateObject());\nconst LifeCellDead = styled.div(_templateObject2());\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handler = () => {\n      if (this.props.isRunning === false) {\n        this.setState(prevState => {\n          return _objectSpread({}, prevState, {\n            isAlive: !prevState.isAlive\n          });\n        });\n        this.props.onClick(this.props.id);\n      }\n    };\n\n    this.state = {\n      isAlive: props.isAlive,\n      toggleUpdateState: props.toggleUpdateState\n    };\n  } //this is called before rendering.\n\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.toggleUpdateState !== prevState.toggleUpdateState) {\n      return {\n        isAlive: nextProps.isAlive,\n        toggleUpdateState: nextProps.toggleUpdateState\n      };\n    }\n\n    return null;\n  } //revist why using generation over toggle doesn't work\n\n\n  render() {\n    if (this.state.isAlive === true) {\n      return React.createElement(LifeCellAlive, {\n        id: this.props.id,\n        onClick: this.handler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(LifeCellDead, {\n        id: this.props.id,\n        onClick: this.handler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\n;\nexport default Cell;","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/components/Cell.js"],"names":["React","Component","styled","LifeCellAlive","div","LifeCellDead","Cell","constructor","props","handler","isRunning","setState","prevState","isAlive","onClick","id","state","toggleUpdateState","getDerivedStateFromProps","nextProps","render"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA;;;;;;;;;;;;;;;;;AAkBA;AACA;AAEA;;AACA,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAV,mBAAnB;AAQA,MAAMC,YAAY,GAAGH,MAAM,CAACE,GAAV,oBAAlB;;AAQA,MAAME,IAAN,SAAmBL,SAAnB,CAA6B;AAE3BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAoBnBC,OApBmB,GAoBT,MAAM;AACd,UAAG,KAAKD,KAAL,CAAWE,SAAX,KAAyB,KAA5B,EAAkC;AAChC,aAAKC,QAAL,CAAcC,SAAS,IAAI;AACzB,mCACKA,SADL;AAEEC,YAAAA,OAAO,EAAE,CAACD,SAAS,CAACC;AAFtB;AAID,SALD;AAMA,aAAKL,KAAL,CAAWM,OAAX,CAAmB,KAAKN,KAAL,CAAWO,EAA9B;AACD;AACF,KA9BkB;;AAEjB,SAAKC,KAAL,GAAa;AACXH,MAAAA,OAAO,EAAEL,KAAK,CAACK,OADJ;AAEXI,MAAAA,iBAAiB,EAAET,KAAK,CAACS;AAFd,KAAb;AAID,GAR0B,CAU3B;;;AACA,SAAOC,wBAAP,CAAgCC,SAAhC,EAA2CP,SAA3C,EAAsD;AACpD,QAAIO,SAAS,CAACF,iBAAV,KAAgCL,SAAS,CAACK,iBAA9C,EAAgE;AAC9D,aAAO;AACLJ,QAAAA,OAAO,EAAEM,SAAS,CAACN,OADd;AAELI,QAAAA,iBAAiB,EAAEE,SAAS,CAACF;AAFxB,OAAP;AAID;;AACD,WAAO,IAAP;AACD,GAnB0B,CAqB3B;;;AAaAG,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKJ,KAAL,CAAWH,OAAX,KAAuB,IAA3B,EAAgC;AAC9B,aACE,oBAAC,aAAD;AAAe,QAAA,EAAE,EAAE,KAAKL,KAAL,CAAWO,EAA9B;AAAkC,QAAA,OAAO,EAAE,KAAKN,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD,KAJD,MAIK;AACH,aACE,oBAAC,YAAD;AAAc,QAAA,EAAE,EAAE,KAAKD,KAAL,CAAWO,EAA7B;AAAiC,QAAA,OAAO,EAAE,KAAKN,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;AACF;;AA5C0B;;AA6C5B;AAED,eAAeH,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n/*\nconst LifeCell = styled.div`\n  border: .5px solid black;\n  width: 9px;\n  height: 9px;\n  border-radius: 25%;\n  background-color : ${state => {\n    //I don't fully understand how passing values into this works\n    console.log('color: ' + state.isAlive)\n    if(state.isAlive === true){\n      return 'green';\n    } else {\n      return 'black';\n    }\n  }};\n`;\n*/\n\n//look into Style (React)\n//<div style={{ background: ‘black’, width: 100, height: 100 }} /> \n//const style = {...}\nconst LifeCellAlive = styled.div`\n  border: .5px solid black;\n  width: 9px;\n  height: 9px;\n  border-radius: 25%;\n  background-color : green;\n`;\n\nconst LifeCellDead = styled.div`\n  border: .5px solid black;\n  width: 9px;\n  height: 9px;\n  border-radius: 25%;\n  background-color : black;\n`;\n\nclass Cell extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAlive: props.isAlive,\n      toggleUpdateState: props.toggleUpdateState\n    };\n  }\n  \n  //this is called before rendering.\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.toggleUpdateState !== prevState.toggleUpdateState){\n      return {\n        isAlive: nextProps.isAlive,\n        toggleUpdateState: nextProps.toggleUpdateState\n      }\n    }\n    return null\n  }\n  \n  //revist why using generation over toggle doesn't work\n  handler = () => {\n    if(this.props.isRunning === false){\n      this.setState(prevState => {\n        return {\n          ...prevState,\n          isAlive: !prevState.isAlive\n        }\n      });\n      this.props.onClick(this.props.id)\n    }\n  };\n \n  render() {\n    if (this.state.isAlive === true){\n      return(\n        <LifeCellAlive id={this.props.id} onClick={this.handler}  />\n      )\n    }else{\n      return(\n        <LifeCellDead id={this.props.id} onClick={this.handler}  />\n      )\n    }\n  }\n};\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}