{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _taggedTemplateLiteral from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/components/Cell.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  border: .5px solid black;\\n  width: 9px;\\n  height: 9px;\\n  border-radius: 25%;\\n  background-color : \", \";\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nconst LifeCell = styled.div(_templateObject(), props => {\n  //I don't fully understand how passing values into this works\n  if (props.isAlive === true) {\n    return 'green';\n  } else {\n    return 'black';\n  }\n}); //pure component (import pure component)\n\nclass Cell extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.handler = event => {\n      if (this.props.isRunning === false) {\n        this.setState(prevState => {\n          return _objectSpread({}, prevState, {\n            isAlive: !prevState.isAlive\n          });\n        });\n        this.props.onClick(this.props.id);\n      }\n    };\n\n    this.state = {\n      isAlive: props.isAlive\n    };\n  }\n\n  render() {\n    return (//onClick={ () => this.props.onClick(this.props.id) \n\n      /*<LifeCell id={this.props.id} isAlive={this.props.isAlive} onClick={event => this.handleClick(event)} />*/\n      //this.handler(this.props.id, this.props.onClick)\n      React.createElement(LifeCell, {\n        id: this.props.id,\n        isAlive: this.state.isAlive,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      })\n    );\n  }\n\n}\n\nexport default connect()(Cell);","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/components/Cell.js"],"names":["React","PureComponent","styled","connect","LifeCell","div","props","isAlive","Cell","constructor","handler","event","isRunning","setState","prevState","onClick","id","state","render"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,MAAMC,QAAQ,GAAGF,MAAM,CAACG,GAAV,oBAKSC,KAAK,IAAI;AAC5B;AACA,MAAGA,KAAK,CAACC,OAAN,KAAkB,IAArB,EAA0B;AACxB,WAAO,OAAP;AACD,GAFD,MAEO;AACL,WAAO,OAAP;AACD;AACF,CAZW,CAAd,C,CAcA;;AACA,MAAMC,IAAN,SAAmBP,aAAnB,CAAiC;AAE/BQ,EAAAA,WAAW,CAACH,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAOnBI,OAPmB,GAOTC,KAAK,IAAI;AACjB,UAAG,KAAKL,KAAL,CAAWM,SAAX,KAAyB,KAA5B,EAAkC;AAChC,aAAKC,QAAL,CAAcC,SAAS,IAAI;AACzB,mCACKA,SADL;AAEEP,YAAAA,OAAO,EAAE,CAACO,SAAS,CAACP;AAFtB;AAID,SALD;AAMA,aAAKD,KAAL,CAAWS,OAAX,CAAmB,KAAKT,KAAL,CAAWU,EAA9B;AACD;AACF,KAjBkB;;AAEjB,SAAKC,KAAL,GAAa;AACXV,MAAAA,OAAO,EAAED,KAAK,CAACC;AADJ,KAAb;AAGD;;AAcDW,EAAAA,MAAM,GAAG;AACP,WACE;;AACA;AACA;AACA,0BAAC,QAAD;AAAU,QAAA,EAAE,EAAE,KAAKZ,KAAL,CAAWU,EAAzB;AAA6B,QAAA,OAAO,EAAE,KAAKC,KAAL,CAAWV,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAMD;;AA5B8B;;AA+BjC,eAAeJ,OAAO,GACpBK,IADoB,CAAtB","sourcesContent":["import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\n\nconst LifeCell = styled.div`\n  border: .5px solid black;\n  width: 9px;\n  height: 9px;\n  border-radius: 25%;\n  background-color : ${props => {\n    //I don't fully understand how passing values into this works\n    if(props.isAlive === true){\n      return 'green';\n    } else {\n      return 'black';\n    }\n  }};\n`;\n//pure component (import pure component)\nclass Cell extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAlive: props.isAlive,\n    };\n  }\n  \n  handler = event => {\n    if(this.props.isRunning === false){\n      this.setState(prevState => {\n        return {\n          ...prevState,\n          isAlive: !prevState.isAlive\n        }\n      });\n      this.props.onClick(this.props.id)\n    }\n  };\n\n  render() {\n    return(\n      //onClick={ () => this.props.onClick(this.props.id) \n      /*<LifeCell id={this.props.id} isAlive={this.props.isAlive} onClick={event => this.handleClick(event)} />*/\n      //this.handler(this.props.id, this.props.onClick)\n      <LifeCell id={this.props.id} isAlive={this.state.isAlive}   />\n    )\n  }\n}\n\nexport default connect(\n)(Cell);"]},"metadata":{},"sourceType":"module"}