{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\nimport { iterateBoard, toggleCellUpdate } from './actions/';\n\nclass App extends Component {\n  componentDidMount() {//this.props.initializeBoard();\n  }\n\n  componentDidUpdate(prevProps, prevState) {}\n\n  render() {\n    if (!this.props.iterating) {\n      console.log('-------------- LOADING --------------');\n      return React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(Board, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      })), React.createElement(Controls, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      })));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  iterateBoard,\n  toggleCellUpdate\n})(App);\n/*\n<SmurfForm {...props} />\n<Smurfs {...this.props} />\n */","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/App.js"],"names":["React","Component","Board","Controls","connect","iterateBoard","toggleCellUpdate","App","componentDidMount","componentDidUpdate","prevProps","prevState","render","props","iterating","console","log","mapStateToProps","state","board","delay","isRunning","generation","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,YAA/C;;AAGA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAG1BO,EAAAA,iBAAiB,GAAG,CAClB;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB,CAEvC;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAG,CAAC,KAAKC,KAAL,CAAWC,SAAf,EAAyB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAHD,MAGK;AACH,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,oBAAW,KAAKH,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAEE,oBAAC,QAAD,oBAAc,KAAKA,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,CADF;AAMD;AACF;;AAvByB;;AA0B5B,MAAMI,eAAe,GAAGC,KAAK,KAAK;AAChCC,EAAAA,KAAK,EAAED,KAAK,CAACC,KADmB;AAEhCC,EAAAA,KAAK,EAAEF,KAAK,CAACE,KAFmB;AAGhCC,EAAAA,SAAS,EAAEH,KAAK,CAACG,SAHe;AAIhCC,EAAAA,UAAU,EAAE,CAJoB;AAKhCR,EAAAA,SAAS,EAAE,KALqB;AAMhCS,EAAAA,KAAK,EAAEL,KAAK,CAACK;AANmB,CAAL,CAA7B;;AASA,eAAenB,OAAO,CACpBa,eADoB,EAEpB;AAAEZ,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAFoB,CAAP,CAGbC,GAHa,CAAf;AAKA","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { connect } from 'react-redux';\nimport { iterateBoard, toggleCellUpdate } from './actions/';\n\n\nclass App extends Component {\n\n  \n  componentDidMount() {\n    //this.props.initializeBoard();\n  }\n\n  componentDidUpdate(prevProps, prevState){\n\n  }\n\n  render() {\n    if(!this.props.iterating){\n      console.log('-------------- LOADING --------------');\n      return <h4>Loading...</h4>\n    }else{\n      return (\n        <div className=\"App\">\n          <Board {...this.props} />\n          <Controls {...this.props} />\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  delay: state.delay,\n  isRunning: state.isRunning,\n  generation: 0,\n  iterating: false,\n  error: state.error\n});\n\nexport default connect(\n  mapStateToProps,\n  { iterateBoard, toggleCellUpdate }\n)(App);\n\n/*\n<SmurfForm {...props} />\n<Smurfs {...this.props} />\n */"]},"metadata":{},"sourceType":"module"}