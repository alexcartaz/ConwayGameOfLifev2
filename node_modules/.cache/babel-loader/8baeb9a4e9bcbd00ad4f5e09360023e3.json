{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { START_BOARD_ITERATE, BOARD_ITERATE_SUCCESS } from '../actions'; //import initBoard from ../lifeFunctions/lifeFunctions.js\n\nfunction initBoard() {\n  let board = [];\n  let randomSeed = 0; //this config makes every 1 in 10 random squares in 100x100\n\n  for (let c = 0; c < 2500; c++) {\n    randomSeed = Math.floor(Math.random() * 11);\n\n    if (randomSeed === 0) {\n      board[c] = true;\n    } else {\n      board[c] = false;\n    }\n  }\n\n  console.log(board);\n  return board;\n}\n\nconst initState = {\n  board: initBoard(),\n  isRunning: false,\n  delay: 2,\n  //ms\n  generation: 0,\n  error: null\n};\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    //change view\n    case START_BOARD_ITERATE:\n      return _objectSpread({}, state, {\n        error: null\n      });\n\n    case BOARD_ITERATE_SUCCESS:\n      return _objectSpread({}, state, {\n        error: null\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/reducers/index.js"],"names":["START_BOARD_ITERATE","BOARD_ITERATE_SUCCESS","initBoard","board","randomSeed","c","Math","floor","random","console","log","initState","isRunning","delay","generation","error","reducer","state","action","type"],"mappings":";AAAA,SACEA,mBADF,EAEEC,qBAFF,QAGO,YAHP,C,CAKA;;AAEA,SAASC,SAAT,GAAoB;AAClB,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,UAAU,GAAG,CAAjB,CAFkB,CAGlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAA8B;AAC5BD,IAAAA,UAAU,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAb;;AACA,QAAIJ,UAAU,KAAK,CAAnB,EAAsB;AACpBD,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,IAAX;AACD,KAFD,MAEK;AACHF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,KAAX;AACD;AACF;;AACDI,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACA,SAAOA,KAAP;AACD;;AAED,MAAMQ,SAAS,GAAG;AAChBR,EAAAA,KAAK,EAAED,SAAS,EADA;AAEhBU,EAAAA,SAAS,EAAE,KAFK;AAGhBC,EAAAA,KAAK,EAAE,CAHS;AAGN;AACVC,EAAAA,UAAU,EAAE,CAJI;AAKhBC,EAAAA,KAAK,EAAE;AALS,CAAlB;;AAQA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,SAAT,EAAoBO,MAApB,KAA+B;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKnB,mBAAL;AACE,+BACKiB,KADL;AAEEF,QAAAA,KAAK,EAAE;AAFT;;AAIF,SAAKd,qBAAL;AACE,+BACKgB,KADL;AAEEF,QAAAA,KAAK,EAAE;AAFT;;AAKF;AACE,aAAOE,KAAP;AAdJ;AAgBD,CAjBD;;AAmBA,eAAeD,OAAf","sourcesContent":["import {\n  START_BOARD_ITERATE,\n  BOARD_ITERATE_SUCCESS,\n} from '../actions';\n\n//import initBoard from ../lifeFunctions/lifeFunctions.js\n\nfunction initBoard(){\n  let board = []\n  let randomSeed = 0\n  //this config makes every 1 in 10 random squares in 100x100\n  for (let c = 0; c < 2500; c++){\n    randomSeed = Math.floor(Math.random() * 11);\n    if (randomSeed === 0) {\n      board[c] = true\n    }else{\n      board[c] = false\n    }\n  }\n  console.log(board)\n  return board\n}\n\nconst initState = {\n  board: initBoard(),\n  isRunning: false,\n  delay: 2, //ms\n  generation: 0,\n  error: null,\n}\n\nconst reducer = (state = initState, action) => {\n  switch (action.type){\n    //change view\n    case START_BOARD_ITERATE:\n      return {\n        ...state,\n        error: null\n      };\n    case BOARD_ITERATE_SUCCESS:\n      return {\n        ...state,\n        error: null\n      };\n\n    default: \n      return state;\n  }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}