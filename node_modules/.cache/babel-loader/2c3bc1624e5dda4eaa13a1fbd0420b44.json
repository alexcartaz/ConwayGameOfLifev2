{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/components/Controls.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  background-color: white;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  border: .5px solid red;\\n  flex-direction: row;\\n  width: 500px;\\n  height: 100%;\\n  background-color: white;\\n  margin: 0 auto;\\n  flex-wrap: wrap;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react'; //import { iterateBoard } from '../actions/';\n\nimport styled from 'styled-components';\n\nfunction generateIndex(row, column) {\n  return row * 50 + column;\n}\n\nfunction calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column) {\n  let indices = [];\n  indices.push(generateIndex(row_above, left_column));\n  indices.push(generateIndex(row_above, currentColumn));\n  indices.push(generateIndex(row_above, right_column));\n  indices.push(generateIndex(currentRow, right_column));\n  indices.push(generateIndex(row_below, right_column));\n  indices.push(generateIndex(row_below, currentColumn));\n  indices.push(generateIndex(row_below, left_column));\n  indices.push(generateIndex(currentRow, left_column));\n  return indices;\n}\n\nfunction determineNumberOfAliveNeighbors(board, index) {\n  //default 2500 (50x50)\n  //this approach should work for any board of equal height/width\n  let len = board.length;\n  let numRows = Math.sqrt(len);\n  let currentRow = Math.floor(index / numRows); //btw 1-50\n\n  let currentColumn = index % numRows;\n  /*\n  console.log(\"row: \" + currentRow)\n  console.log(\"column: \" + currentColumn)\n  console.log(\"index: \" + generateIndex(currentRow,currentColumn))\n  */\n\n  let row_above = 0;\n  let row_below = 0;\n  let left_column = 0;\n  let right_column = 0;\n\n  if (currentRow === 0) {\n    row_above = 49;\n  } else {\n    row_above = currentRow + 1;\n  }\n\n  if (currentRow === 49) {\n    row_below = 0;\n  } else {\n    row_below = currentRow - 1;\n  }\n\n  if (currentColumn === 49) {\n    right_column = 0;\n  } else {\n    right_column = currentColumn + 1;\n  }\n\n  if (currentColumn === 0) {\n    left_column = 49;\n  } else {\n    left_column = currentColumn - 1;\n  }\n\n  let indicesOfNeighbors = calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column);\n  let numNeighbors = 0;\n\n  for (let i = 0; i < 9; i++) {\n    if (board[indicesOfNeighbors[i]]) {\n      numNeighbors++;\n    }\n  }\n\n  return numNeighbors;\n}\n/*\n Rules:\n If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.\n If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.\n*/\n\n\nfunction iterateGeneration(board) {\n  console.log(\"!\");\n  let newBoard = [];\n\n  for (let c = 0; c < 2500; c++) {\n    let numNeighbors = determineNumberOfAliveNeighbors(board, 1329);\n\n    if (board[c] && (numNeighbors === 2 || numNeighbors === 3)) {\n      newBoard[c] = false;\n    } else if (!board[c] && numNeighbors === 3) {\n      newBoard[c] = true;\n    } else {\n      newBoard[c] = false;\n    }\n  }\n\n  return newBoard;\n}\n\nconst ControlsContainer = styled.div(_templateObject());\nconst Iterate = styled.button(_templateObject2());\n\nclass Controls extends Component {\n  /*\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: props.board,\n      delay: props.delay,\n      isRunning: props.isRunning,\n      generation: props.generation\n    };\n  }\n  */\n\n  /*\n   iterateClick = event => {\n     console.log('*')\n     if(this.props.isRunning === false){\n       /*\n       this.setState(prevState => {\n         return {\n           ...prevState,\n           generation: prevState.generation+1\n         }\n       });\n       */\n  //this.props.onIterateClick(iterateGeneration(this.state.board), (this.state.generation))\n  //iterateBoard();\n  //   }\n  // };\n  render() {\n    return (//<Iterate />\n      //// <button onClick={event => this.iterateClick(event)} >Iterate</button>\n      React.createElement(ControlsContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.props.onIterateClick(iterateGeneration(this.props.board), this.props.generation),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Iterate\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Generation: \", this.props.generation))\n      /*\n      <Start />\n      <Stop />\n      <Clear />\n      */\n\n      /*<Speed />*/\n\n    );\n  }\n\n}\n\nexport default Controls;","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/components/Controls.js"],"names":["React","Component","styled","generateIndex","row","column","calcIndiciesOfNeighbors","currentRow","currentColumn","row_above","row_below","left_column","right_column","indices","push","determineNumberOfAliveNeighbors","board","index","len","length","numRows","Math","sqrt","floor","indicesOfNeighbors","numNeighbors","i","iterateGeneration","console","log","newBoard","c","ControlsContainer","div","Iterate","button","Controls","render","props","onIterateClick","generation"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import { iterateBoard } from '../actions/';\nimport styled from 'styled-components';\n\n \n \nfunction generateIndex(row, column){\n  return row*50+column\n}\n\nfunction calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column){\n  let indices = []\n  indices.push(generateIndex(row_above,left_column))\n  indices.push(generateIndex(row_above,currentColumn))\n  indices.push(generateIndex(row_above,right_column))\n  indices.push(generateIndex(currentRow,right_column))\n  indices.push(generateIndex(row_below,right_column))\n  indices.push(generateIndex(row_below,currentColumn))\n  indices.push(generateIndex(row_below,left_column))\n  indices.push(generateIndex(currentRow,left_column))\n  return indices\n}\n\nfunction determineNumberOfAliveNeighbors(board, index){\n  //default 2500 (50x50)\n  //this approach should work for any board of equal height/width\n  let len = board.length\n  let numRows = Math.sqrt(len)\n  let currentRow = Math.floor(index / numRows) //btw 1-50\n  let currentColumn = (index % numRows)\n  /*\n  console.log(\"row: \" + currentRow)\n  console.log(\"column: \" + currentColumn)\n  console.log(\"index: \" + generateIndex(currentRow,currentColumn))\n  */\n  let row_above = 0\n  let row_below = 0\n  let left_column = 0\n  let right_column = 0\n\n  if (currentRow === 0) {\n    row_above = 49\n  } else {\n    row_above = currentRow + 1\n  }\n\n  if (currentRow === 49) {\n    row_below = 0\n  } else {\n    row_below = currentRow - 1\n  }\n\n  if (currentColumn === 49) {\n    right_column = 0\n  } else {\n    right_column = currentColumn + 1\n  }\n\n  if (currentColumn === 0) {\n    left_column = 49\n  } else {\n    left_column = currentColumn - 1\n  }\n\n\n  let indicesOfNeighbors = calcIndiciesOfNeighbors(currentRow, currentColumn, row_above, row_below, left_column, right_column)\n  let numNeighbors = 0\n  for (let i = 0; i < 9; i++){\n    if (board[indicesOfNeighbors[i]]){\n      numNeighbors++;\n    }\n  }\n\n  return numNeighbors\n}\n\n /*\n  Rules:\n  If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.\n  If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.\n*/\n\nfunction iterateGeneration(board){\n  console.log(\"!\")\n  let newBoard = []\n  for (let c = 0; c < 2500; c++){\n    let numNeighbors = determineNumberOfAliveNeighbors(board, 1329)\n    if (board[c] && (numNeighbors===2 || numNeighbors===3)){\n      newBoard[c] = false\n    }else if(!board[c] && numNeighbors===3){\n      newBoard[c] = true\n    }else{\n      newBoard[c] = false\n    }\n  }\n  return newBoard\n}\n\nconst ControlsContainer = styled.div`\n  border: .5px solid red;\n  flex-direction: row;\n  width: 500px;\n  height: 100%;\n  background-color: white;\n  margin: 0 auto;\n  flex-wrap: wrap;\n`;\n\nconst Iterate = styled.button`\n  background-color: white;\n`;\n\nclass Controls extends Component {\n  /*\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: props.board,\n      delay: props.delay,\n      isRunning: props.isRunning,\n      generation: props.generation\n    };\n  }\n  */\n /*\n  iterateClick = event => {\n    console.log('*')\n    if(this.props.isRunning === false){\n      /*\n      this.setState(prevState => {\n        return {\n          ...prevState,\n          generation: prevState.generation+1\n        }\n      });\n      */\n      //this.props.onIterateClick(iterateGeneration(this.state.board), (this.state.generation))\n      //iterateBoard();\n //   }\n // };\n\n  render() {\n    return(\n      //<Iterate />\n      //// <button onClick={event => this.iterateClick(event)} >Iterate</button>\n      <ControlsContainer>\n        <button onClick={this.props.onIterateClick(iterateGeneration(this.props.board), (this.props.generation))} >Iterate</button>\n        <div>Generation: {this.props.generation}</div>\n      </ControlsContainer>\n      /*\n      <Start />\n      <Stop />\n      <Clear />\n      */\n      /*<Speed />*/\n    );\n  }\n}\n\nexport default Controls;"]},"metadata":{},"sourceType":"module"}