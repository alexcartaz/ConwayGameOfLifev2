{"ast":null,"code":"import _objectSpread from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _taggedTemplateLiteral from \"/Users/alex/Lambda/Conways-Life/life/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/alex/Lambda/Conways-Life/life/src/App.js\";\n\nfunction _templateObject6() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  width: 100%;\\n  height: 100%;\\n  flex-wrap: wrap;\\n\"]);\n\n  _templateObject6 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: row;\\n  width: 100%;\\n  height: 100%;\\n  flex-wrap: wrap;\\n  border: 1px solid purple\\n\"]);\n\n  _templateObject5 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: row;\\n  width: 50%;\\n  height: 100%;\\n  flex-wrap: wrap;\\n  border: 1px solid yellow;\\n  text-align: left;\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  width: 50%;\\n  height: 100%;\\n  flex-wrap: wrap;\\n  border: 1px solid green;\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  width: 100%;\\n  height: 100%;\\n  flex-wrap: wrap;\\n  border: 1px solid blue;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: row;\\n  width: 100%;\\n  margin: 0 auto;\\n  flex-wrap: wrap;\\n  border: 1px solid red;\\n  justify-content: center;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { initBoard, iterateGeneration, clearBoard } from './lifeFunctions/';\nimport styled from 'styled-components';\nconst Title = styled.div(_templateObject());\nconst Body = styled.div(_templateObject2());\nconst BoardContainer = styled.div(_templateObject3());\nconst Rules = styled.div(_templateObject4());\nconst Footer = styled.div(_templateObject5());\nconst AppContainer = styled.div(_templateObject6());\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.boardIterate = this.boardIterate.bind(this);\n    this.boardClear = this.boardClear.bind(this);\n    this.boardRandomInit = this.boardRandomInit.bind(this);\n    this.startRun = this.startRun.bind(this);\n    this.endRun = this.endRun.bind(this);\n    this.state = {\n      //board: initBoard(),\n      isRunning: false,\n      board: initBoard(),\n      delay: 200,\n      //ms\n      generation: 0,\n      iterating: false,\n      toggleUpdateState: false,\n      error: null\n    };\n    this.currentBoard = this.state.board.concat([]);\n  } //only need to store values on state that are needed to trigger component re-renders\n  //removed board from state since onClick cell and button clicks (iterate, etc.) are\n  //all thats needed for re-render (not board itself)\n  //-can probably use generation for loop increment re-render if i hit issues\n  //once working, i should refactor to remove anything else from state not used for re-render\n\n\n  onCellClick(id) {\n    console.log('cell click');\n    this.currentBoard[id] = !this.currentBoard[id];\n  }\n\n  boardClear() {\n    console.log('*clear*');\n    console.log('tUS: ' + this.state.toggleUpdateState);\n    let clearedBoard = clearBoard();\n    this.currentBoard = clearedBoard;\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        generation: 0,\n        board: clearedBoard.concat([]),\n        toggleUpdateState: !prevState.toggleUpdateState\n      });\n    });\n  }\n\n  boardIterate() {\n    console.log('*iterating*');\n\n    let _iterateGeneration = iterateGeneration(this.currentBoard),\n        newBoard = _iterateGeneration.newBoard,\n        didChange = _iterateGeneration.didChange;\n\n    this.currentBoard = newBoard;\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        generation: prevState.generation + 1,\n        board: newBoard.concat([]),\n        toggleUpdateState: !prevState.toggleUpdateState,\n        isRunning: didChange\n      });\n    });\n  }\n\n  boardRandomInit() {\n    console.log('*board random init*');\n    let newBoard = initBoard();\n    this.currentBoard = newBoard;\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        generation: 0,\n        board: newBoard.concat([]),\n        toggleUpdateState: !prevState.toggleUpdateState\n      });\n    });\n  }\n\n  startRun() {\n    console.log('*start run*');\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        isRunning: true\n      });\n    });\n  }\n\n  endRun() {\n    console.log('*end run*');\n    this.setState(prevState => {\n      return _objectSpread({}, prevState, {\n        isRunning: false\n      });\n    });\n  }\n\n  render() {\n    let _this$state = this.state,\n        board = _this$state.board,\n        isRunning = _this$state.isRunning,\n        generation = _this$state.generation,\n        delay = _this$state.delay,\n        toggleUpdateState = _this$state.toggleUpdateState;\n    return React.createElement(AppContainer, {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Conway's Game of Life\"), React.createElement(Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(BoardContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: board,\n      isRunning: isRunning,\n      onClick: this.onCellClick,\n      toggleUpdateState: toggleUpdateState,\n      triggerIterate: this.boardIterate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(Controls, {\n      board: board,\n      generation: generation,\n      isRunning: isRunning,\n      delay: delay,\n      onRandomInitClick: this.boardRandomInit,\n      onIterateClick: this.boardIterate,\n      onClearClick: this.boardClear,\n      onRunClick: this.startRun,\n      onStopClick: this.endRun,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })), React.createElement(Rules, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"The Rules:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"1. If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"2. If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"The History of Conway's Game of Life: blah blah blah\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alex/Lambda/Conways-Life/life/src/App.js"],"names":["React","Component","Board","Controls","initBoard","iterateGeneration","clearBoard","styled","Title","div","Body","BoardContainer","Rules","Footer","AppContainer","App","constructor","props","onCellClick","bind","boardIterate","boardClear","boardRandomInit","startRun","endRun","state","isRunning","board","delay","generation","iterating","toggleUpdateState","error","currentBoard","concat","id","console","log","clearedBoard","setState","prevState","newBoard","didChange","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport { initBoard, iterateGeneration , clearBoard } from './lifeFunctions/';\nimport styled from 'styled-components';\n\nconst Title = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  margin: 0 auto;\n  flex-wrap: wrap;\n  border: 1px solid red;\n  justify-content: center;\n`;\n\nconst Body = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex-wrap: wrap;\n  border: 1px solid blue;\n`;\n\nconst BoardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n  height: 100%;\n  flex-wrap: wrap;\n  border: 1px solid green;\n`;\n\nconst Rules = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 50%;\n  height: 100%;\n  flex-wrap: wrap;\n  border: 1px solid yellow;\n  text-align: left;\n`;\n\nconst Footer = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n  flex-wrap: wrap;\n  border: 1px solid purple\n`;\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex-wrap: wrap;\n`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.boardIterate = this.boardIterate.bind(this);\n    this.boardClear = this.boardClear.bind(this);\n    this.boardRandomInit = this.boardRandomInit.bind(this);\n    this.startRun = this.startRun.bind(this);\n    this.endRun = this.endRun.bind(this);\n    this.state = {\n      //board: initBoard(),\n      isRunning: false,\n      board: initBoard(),\n      delay: 200, //ms\n      generation: 0,\n      iterating: false,\n      toggleUpdateState: false,\n      error: null\n    };\n    this.currentBoard = this.state.board.concat([]);\n  }\n\n  //only need to store values on state that are needed to trigger component re-renders\n  //removed board from state since onClick cell and button clicks (iterate, etc.) are\n  //all thats needed for re-render (not board itself)\n  //-can probably use generation for loop increment re-render if i hit issues\n  //once working, i should refactor to remove anything else from state not used for re-render\n  onCellClick(id) {\n    console.log('cell click')\n    this.currentBoard[id] = !this.currentBoard[id]\n  };\n\n  boardClear() {\n    console.log('*clear*')\n    console.log('tUS: ' + this.state.toggleUpdateState)\n    let clearedBoard = clearBoard()\n    this.currentBoard = clearedBoard\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        generation: 0,\n        board: clearedBoard.concat([]),\n        toggleUpdateState: !prevState.toggleUpdateState\n      };\n    });\n  }\n\n  boardIterate(){\n    console.log('*iterating*')\n    let { newBoard, didChange } = iterateGeneration(this.currentBoard)\n    this.currentBoard = newBoard\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        generation: prevState.generation + 1,\n        board: newBoard.concat([]),\n        toggleUpdateState: !prevState.toggleUpdateState,\n        isRunning: didChange\n      };\n    });\n\n  }\n\n  boardRandomInit(){\n    console.log('*board random init*')\n    let newBoard = initBoard()\n    this.currentBoard = newBoard\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        generation: 0,\n        board: newBoard.concat([]),\n        toggleUpdateState: !prevState.toggleUpdateState\n      };\n    });\n  }\n\n  startRun(){\n    console.log('*start run*')\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        isRunning: true\n      };\n    });\n  }\n\n  endRun(){\n    console.log('*end run*')\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        isRunning: false\n      };\n    });\n  }\n      \n  render() {\n    let {board, isRunning, generation, delay, toggleUpdateState} = this.state\n    return (\n      <AppContainer className=\"App\">\n        <Title>Conway's Game of Life</Title>\n        <Body>\n          <BoardContainer>\n            <Board \n              board={board} \n              isRunning={isRunning} \n              onClick={this.onCellClick} \n              toggleUpdateState={toggleUpdateState} \n              triggerIterate={this.boardIterate}\n            />\n            <Controls \n              board={board} \n              generation={generation} \n              isRunning={isRunning} \n              delay={delay} \n              onRandomInitClick={this.boardRandomInit} \n              onIterateClick={this.boardIterate} \n              onClearClick={this.boardClear}\n              onRunClick={this.startRun} \n              onStopClick={this.endRun}\n            />\n          </BoardContainer>\n          <Rules>\n            <p>The Rules:</p>\n            <br/>\n            <br/>\n            <p>1. If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.</p>\n         \n            <p>2. If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.</p>\n            <br/>\n          </Rules>\n        </Body>\n        <Footer>\n          The History of Conway's Game of Life:\n\n          blah blah blah\n        </Footer>\n      </AppContainer>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}